[
  {
    "objectID": "scripts/CETEyeTrackingPowerAnalysis_report.html",
    "href": "scripts/CETEyeTrackingPowerAnalysis_report.html",
    "title": "CET Eye-Tracking Power Analysis",
    "section": "",
    "text": "Show the code\n# install package librarian if needed\nif (!(\"librarian\" %in% rownames(installed.packages()))) {\n  install.packages(\"librarian\")\n}\n\n# load required packages\nlibrarian::shelf(\n  tidyverse,\n  lme4,\n  lmerTest,\n  simr,\n  effects,\n  sjPlot,\n  ggpubr\n)\nShow the code\nFUNPlotPower &lt;- function(myData,\n                         myBreaks = c(15, 30, seq(60, 160, 20)),\n                         myLegendTitle = waiver(),\n                         myLegendLabels = waiver()) {\n  plot &lt;- myData %&gt;% \n    ggplot(aes(\n      x = nlevels,\n      y = mean,\n      ymin = lower,\n      ymax = upper,\n      color = type,\n      fill = type\n    )) +\n    geom_ribbon(alpha = .1, color = NA) +\n    geom_errorbar(width = 1.5) +\n    geom_line() +\n    geom_point() +\n    geom_hline(yintercept = .95, color = \"grey70\", linetype = \"dashed\") +\n    scale_x_continuous(breaks = myBreaks) +\n    scale_y_continuous(\n      limits = c(0, 1),\n      breaks = seq(0, 1, .05),\n      labels = paste0(seq(0, 100, 5), \"%\")\n    ) +\n    ggthemes::scale_color_colorblind(labels = myLegendLabels) +\n    ggthemes::scale_fill_colorblind(labels = myLegendLabels) +\n    labs(\n      x = \"Number of Participants\",\n      y = \"Power\",\n      color = myLegendTitle,\n      fill = myLegendTitle\n    ) +\n    theme_bw() +\n    theme(\n      legend.position = \"inside\",\n      legend.position.inside = c(.875, .21),\n      panel.grid.minor = element_blank(),\n      panel.border = element_blank(),\n      axis.line = element_line(color = \"black\")\n    )\n  return(plot)\n}\nShow the code\n# read in data\ndata_pilot &lt;- read.csv(file.path(\"../data/CETEyeTracking\", \"AllMeasures_ForAnalysis.csv\"))\n\n# mutate participant and item identifiers to factors\ndata_pilot &lt;- data_pilot %&gt;% \n  mutate(across(c(ORSEE_code, trial_id), as.factor))"
  },
  {
    "objectID": "scripts/CETEyeTrackingPowerAnalysis_report.html#decision-dwell-time",
    "href": "scripts/CETEyeTrackingPowerAnalysis_report.html#decision-dwell-time",
    "title": "CET Eye-Tracking Power Analysis",
    "section": "2.1 Decision ~ Dwell Time",
    "text": "2.1 Decision ~ Dwell Time\nPredicting pro-environmental decisions by relative dwell time on carbon information according to Equation 1 yields:\n\n\nShow the code\n# estimate model\nm.decision &lt;- lme4::glmer(\n  formula = proenv_decision ~ Rel_DT_Carbon +\n    (1 | ORSEE_code) + (1 | trial_id),\n  data = data_pilot,\n  family = binomial(link = \"logit\")\n)\n\n# print results (show log-odds and not odds ratio)\nsjPlot::tab_model(m.decision, transform = NULL)\n\n\n\n\n \nproenv decision\n\n\nPredictors\nLog-Odds\nCI\np\n\n\n(Intercept)\n1.44\n-1.14 – 4.02\n0.274\n\n\nRel DT Carbon\n1.47\n-0.71 – 3.66\n0.187\n\n\nRandom Effects\n\n\n\nσ2\n3.29\n\n\n\nτ00 trial_id\n7.98\n\n\nτ00 ORSEE_code\n15.01\n\n\nICC\n0.87\n\n\nN ORSEE_code\n15\n\n\nN trial_id\n36\n\nObservations\n539\n\n\nMarginal R2 / Conditional R2\n0.004 / 0.875\n\n\n\n\n\n\nAs displayed in Figure 1, the higher the relative dwell time on carbon information, the more likely participants chose the pro-environmental option. This is also reflected in the positive log-odds estimate of Rel_DT_Carbon = 1.47 (even though the effect is not significant given the limited sample size of 15 participants).\n\n\nShow the code\nsjPlot::plot_model(\n  model = m.decision,\n  type = \"eff\",\n  terms = \"Rel_DT_Carbon\",\n  color = \"black\",\n  alpha = 0\n) +\n  theme_bw() +\n  theme(\n    plot.title = element_blank(),\n    panel.border = element_blank(),\n    axis.line = element_line(color = \"black\")\n  )\n\n\n\n\n\n\n\n\nFigure 1: Predicted probability of making a pro-environmental choice depending on the relative dwell time on carbon information."
  },
  {
    "objectID": "scripts/CETEyeTrackingPowerAnalysis_report.html#dwell-time-attitudes",
    "href": "scripts/CETEyeTrackingPowerAnalysis_report.html#dwell-time-attitudes",
    "title": "CET Eye-Tracking Power Analysis",
    "section": "2.2 Dwell Time ~ Attitudes",
    "text": "2.2 Dwell Time ~ Attitudes\nPredicting dwell time on carbon information by pro-environmental attitudes according to Equation 2 yields:\n\n\nShow the code\n# estimate model\nm.dwellTime &lt;- lmer(\n  formula = Rel_DT_Carbon ~ GEB.est + svs_biospheric +\n    (1 | ORSEE_code) + (1 | trial_id),\n  data = data_pilot\n)\n\n# print results\nsjPlot::tab_model(m.dwellTime, digits.re = 4)\n\n\n\n\n \nRel DT Carbon\n\n\nPredictors\nEstimates\nCI\np\n\n\n(Intercept)\n0.37\n0.15 – 0.59\n0.001\n\n\nGEB est\n0.02\n-0.08 – 0.11\n0.742\n\n\nsvs biospheric\n0.04\n-0.01 – 0.08\n0.162\n\n\nRandom Effects\n\n\n\nσ2\n0.0287\n\n\n\nτ00 trial_id\n0.0002\n\n\nτ00 ORSEE_code\n0.0199\n\n\nICC\n0.4125\n\n\nN ORSEE_code\n15\n\n\nN trial_id\n36\n\nObservations\n539\n\n\nMarginal R2 / Conditional R2\n0.088 / 0.464\n\n\n\n\n\n\nAs displayed in Figure 2 Panel A, the higher pro-environmental attitudes are as measures by the SVS biospheric, the more relative time participants spent looking at carbon information. This is also reflected in the positive estimate of svs_biospheric = 0.04. As displayed in Figure 2 Panel B, a similar relationship holds for pro-environmental attitudes as assessed by GEB. However, the association is considerably weaker with GEB.est = 0.02 (which also shows in a higher p value).\n\n\nShow the code\np.dwellTime.svs &lt;- sjPlot::plot_model(\n  model = m.dwellTime,\n  type = \"eff\",\n  terms = \"svs_biospheric\",\n  color = \"black\",\n  alpha = 0\n) +\n  theme_bw() +\n  theme(\n    plot.title = element_blank(),\n    panel.border = element_blank(),\n    axis.line = element_line(color = \"black\")\n  )\n\np.dwellTime.geb &lt;- sjPlot::plot_model(\n  model = m.dwellTime,\n  type = \"eff\",\n  terms = \"GEB.est\",\n  color = \"black\",\n  alpha = 0\n) +\n  theme_bw() +\n  theme(\n    plot.title = element_blank(),\n    panel.border = element_blank(),\n    axis.line = element_line(color = \"black\")\n  )\n\nggarrange(\n  p.dwellTime.svs,\n  p.dwellTime.geb,\n  ncol = 2,\n  labels = c(\"A\", \"B\")\n)\n\n\n\n\n\n\n\n\nFigure 2: Predicted probability of making a pro-environmental choice depending on the relative dwell time on carbon information."
  },
  {
    "objectID": "scripts/CETEyeTrackingPowerAnalysis_report.html#predict-decisions-by-dwell-time",
    "href": "scripts/CETEyeTrackingPowerAnalysis_report.html#predict-decisions-by-dwell-time",
    "title": "CET Eye-Tracking Power Analysis",
    "section": "3.1 Predict Decisions by Dwell Time",
    "text": "3.1 Predict Decisions by Dwell Time\nFigure 3 displays the power curve for predicting pro-environmental decisions by relative dwell time on carbon information. The curve is based on an expected effect size that is equal to the observed effect size in the pilot data = 1.4737 (log-odds). The figure shows that a sample size of 100 participants would achieve 95% power to detect a true effect size that is equal to the one estimated in the pilot data.\n\n\nShow the code\n# number of simulations\nnSims &lt;- 1000\n\n# extend mDecision to include \nm.powC.decision &lt;- simr::extend(\n  m.decision,\n  along = \"ORSEE_code\",\n  n = 1000\n)\n\n# create a power curve data set\npowC.decision &lt;- simr::powerCurve(\n  fit = m.powC.decision,\n  test = fixed(xname = \"Rel_DT_Carbon\", method = \"z\"),\n  along = \"ORSEE_code\",\n  breaks = c(15, seq(60, 120, 20)),\n  nsim = nSims,\n  progress = TRUE\n)\n\n# save simulation results in a data frame\ntime &lt;- format(Sys.time(), \"%Y%m%d_%H%M\")\nfileName &lt;- paste0(\"powC.decision\", \"_\", time, \".RData\")\n\nsave(\n  m.powC.decision,\n  powC.decision,\n  file = file.path(\"../data/CETEyeTracking/simr\", fileName)\n)\n\n\n\n\nShow the code\n# load stored simulations (change file name if necessary)\nfileName &lt;- \"powC.decision_20240404_1010.RData\"\nload(file.path(\"../data/CETEyeTracking/simr\", fileName))\n\n# create and display plot\np.powC.decision &lt;- summary(powC.decision) %&gt;% \n  ggplot(aes(\n    x = nlevels,\n    y = mean,\n    ymin = lower,\n    ymax = upper\n  )) +\n  geom_ribbon(fill = \"grey94\", alpha = .8) +\n  geom_errorbar(color = \"grey40\", width = 1.5) +\n  geom_line(color = \"black\") +\n  geom_point() +\n  geom_hline(yintercept = .95, color = \"grey70\", linetype = \"dashed\") +\n  scale_x_continuous(breaks = summary(powC.decision)$nlevels) +\n  scale_y_continuous(\n    limits = c(0, 1),\n    breaks = seq(0, 1, .05),\n    labels = paste0(seq(0, 100, 5), \"%\")\n  ) +\n  labs(\n    x = \"Number of Participants\",\n    y = \"Power\"\n  ) +\n  theme_bw() +\n  theme(\n    panel.grid.minor = element_blank(),\n    panel.border = element_blank(),\n    axis.line = element_line(color = \"black\")\n  )\n\np.powC.decision\n\n\n\n\n\n\n\n\nFigure 3: Power curve for effect of relative dwell time on carbon information on pro-environmental decision with effect size as estimated in pilot data.\n\n\n\n\n\nUsing effect sizes as estimated in pilot data as a basis for power analyses might produce inflated effect size expectations due to the limited sample size in pilot studies (Leon, Davis, and Kraemer 2011). Thus, we also investigate power curves if the actual effect sizes for relative dwell time on carbon information are 10%, 20%, 30%, 40%, and 50% smaller than the observed effect size in the pilot data. This allows us to get an idea how the effect size affects power. As can be seen in Figure 4, we still achieve quite reasonable 80% power to detect an effect size that is xx% smaller than the effect we estimated in the pilot data.\n\n\nShow the code\n# what is the estimated effect size in our simulated data?\nfixef(m.decision)['Rel_DT_Carbon']\n\n# we will choose a smaller effect sizes and save these in new models\n\n# will choose the new effect size to be 10% smaller than in the pilot data\nm.powC.decision.dwellTime_minus10prcnt &lt;- m.powC.decision\nfixef(m.powC.decision.dwellTime_minus10prcnt)[\"Rel_DT_Carbon\"] &lt;- (1-.1)*fixef(m.powC.decision)[\"Rel_DT_Carbon\"]\n\n# will choose the new effect size to be 20% smaller than in the pilot data\nm.powC.decision.dwellTime_minus20prcnt &lt;- m.powC.decision\nfixef(m.powC.decision.dwellTime_minus20prcnt)[\"Rel_DT_Carbon\"] &lt;- (1-.2)*fixef(m.powC.decision)[\"Rel_DT_Carbon\"]\n\n# will choose the new effect size to be 30% smaller than in the pilot data\nm.powC.decision.dwellTime_minus30prcnt &lt;- m.powC.decision\nfixef(m.powC.decision.dwellTime_minus30prcnt)[\"Rel_DT_Carbon\"] &lt;- (1-.3)*fixef(m.powC.decision)[\"Rel_DT_Carbon\"]\n\n# will choose the new effect size to be 40% smaller than in the pilot data\nm.powC.decision.dwellTime_minus40prcnt &lt;- m.powC.decision\nfixef(m.powC.decision.dwellTime_minus40prcnt)[\"Rel_DT_Carbon\"] &lt;- (1-.4)*fixef(m.powC.decision)[\"Rel_DT_Carbon\"]\n\n# will choose the new effect size to be 50% smaller than in the pilot data\nm.powC.decision.dwellTime_minus50prcnt &lt;- m.powC.decision\nfixef(m.powC.decision.dwellTime_minus50prcnt)[\"Rel_DT_Carbon\"] &lt;- (1-.5)*fixef(m.powC.decision)[\"Rel_DT_Carbon\"]\n\n# test whether simulation will work\ndoTest(m.powC.decision.dwellTime_minus50prcnt, fixed(\"Rel_DT_Carbon\", \"z\"))\n\n\n\n\nShow the code\n# how many simulations should be done for each number of subjects?\nn_sims &lt;- 5\n\n# what are the breaks for number of subjects we would like to calculate power for?\nbreaks_subj &lt;- c(15, 30, seq(60, 160, 20))\n \n# create power curve data sets\n\npowC.decision.dwellTime_minus10prcnt &lt;- powerCurve(\n  fit = m.powC.decision.dwellTime_minus10prcnt,\n  test = fixed(\"Rel_DT_Carbon\", method = \"z\"),\n  along = \"ORSEE_code\",\n  breaks = breaks_subj,\n  nsim = n_sims,\n  progress = TRUE\n)\npowC.decision.dwellTime_minus20prcnt &lt;- powerCurve(\n  fit = m.powC.decision.dwellTime_minus20prcnt,\n  test = fixed(\"Rel_DT_Carbon\", method = \"z\"),\n  along = \"ORSEE_code\",\n  breaks = breaks_subj,\n  nsim = n_sims,\n  progress = TRUE\n)\npowC.decision.dwellTime_minus30prcnt &lt;- powerCurve(\n  fit = m.powC.decision.dwellTime_minus30prcnt,\n  test = fixed(\"Rel_DT_Carbon\", method = \"z\"),\n  along = \"ORSEE_code\",\n  breaks = breaks_subj,\n  nsim = n_sims,\n  progress = TRUE\n)\npowC.decision.dwellTime_minus40prcnt &lt;- powerCurve(\n  fit = m.powC.decision.dwellTime_minus40prcnt,\n  test = fixed(\"Rel_DT_Carbon\", method = \"z\"),\n  along = \"ORSEE_code\",\n  breaks = breaks_subj,\n  nsim = n_sims,\n  progress = TRUE\n)\npowC.decision.dwellTime_minus50prcnt &lt;- powerCurve(\n  fit = m.powC.decision.dwellTime_minus50prcnt,\n  test = fixed(\"Rel_DT_Carbon\", method = \"z\"),\n  along = \"ORSEE_code\",\n  breaks = breaks_subj,\n  nsim = n_sims,\n  progress = TRUE\n)\n\n# combine power curve data sets\npowC.decision.dwellTime.effectsize &lt;- rbind(\n  summary(powC.decision) %&gt;% \n    mutate(type = \"pilotData\"),\n  summary(powC.decision.dwellTime_minus10prcnt) %&gt;% \n    mutate(type = \"effectsize.minus10%\"),\n  summary(powC.decision.dwellTime_minus20prcnt) %&gt;% \n    mutate(type = \"effectsize.minus20%\"),\n  summary(powC.decision.dwellTime_minus30prcnt) %&gt;% \n    mutate(type = \"effectsize.minus30%\"),\n  summary(powC.decision.dwellTime_minus40prcnt) %&gt;% \n    mutate(type = \"effectsize.minus40%\"),\n  summary(powC.decision.dwellTime_minus50prcnt) %&gt;% \n    mutate(type = \"effectsize.minus50%\")\n)\n\n# save simulation results in a data frame\ntime &lt;- format(Sys.time(), \"%Y%m%d_%H%M\")\nfileName &lt;- paste0(\"powC.decision.dwellTime.effectsize\", \"_\", time, \".RData\")\n\nsave(\n  powC.decision.dwellTime_minus10prcnt,\n  powC.decision.dwellTime_minus20prcnt,\n  powC.decision.dwellTime_minus30prcnt,\n  powC.decision.dwellTime_minus40prcnt,\n  powC.decision.dwellTime_minus50prcnt,\n  powC.decision.dwellTime.effectsize,\n  file = file.path(\"../data/CETEyeTracking/simr\", fileName)\n)\n\n\n\n\nShow the code\n# load stored simulations (change file name if necessary)\nfileName &lt;- \"powC.decision.dwellTime.effectsize_20240404_1654.RData\"\nload(file.path(\"../data/CETEyeTracking/simr\", fileName))\n\n# prepare data for plot: add + 2 on x axis for every type in order to prevent\n# overprinting of errorbars\ndataForPlot &lt;- rbind(\n  filter(powC.decision.dwellTime.effectsize, type == \"pilotData\"),\n  filter(powC.decision.dwellTime.effectsize, type == \"effectsize.minus10%\") %&gt;% \n    mutate(nlevels = nlevels + 1*2),\n  filter(powC.decision.dwellTime.effectsize, type == \"effectsize.minus20%\") %&gt;% \n    mutate(nlevels = nlevels + 2*2),\n  filter(powC.decision.dwellTime.effectsize, type == \"effectsize.minus30%\") %&gt;% \n    mutate(nlevels = nlevels + 3*2),\n  filter(powC.decision.dwellTime.effectsize, type == \"effectsize.minus40%\") %&gt;% \n    mutate(nlevels = nlevels + 4*2),\n  filter(powC.decision.dwellTime.effectsize, type == \"effectsize.minus50%\") %&gt;% \n    mutate(nlevels = nlevels + 5*2)\n)\n# define levels of type\ndataForPlot &lt;- dataForPlot %&gt;% \n  mutate(type = factor(type,\n                       levels = c(\n                         \"pilotData\",\n                         \"effectsize.minus10%\",\n                         \"effectsize.minus20%\",\n                         \"effectsize.minus30%\",\n                         \"effectsize.minus40%\",\n                         \"effectsize.minus50%\"\n                       )))\n\ntmp.legendLabels &lt;- c(\n  paste0(\"pilot data = \", round(fixef(m.decision)['Rel_DT_Carbon'], 4)),\n  paste0(\"-\", seq(10, 50, 10), \"% = \", round(fixef(m.decision)['Rel_DT_Carbon']*(1-seq(.1, .5, .1)), digits = 4))\n)\n\n# create and display plot\np.powC.decision.dwellTime.effectSizes &lt;- FUNPlotPower(\n  myData= dataForPlot,\n  myLegendTitle = \"Effect Size\",\n  myLegendLabels = tmp.legendLabels\n)\np.powC.decision.dwellTime.effectSizes\n\n\n\n\n\n\n\n\nFigure 4: Power curve for the effect of relative dwell time on carbon information on pro-environmental decisions by varying effect sizes."
  },
  {
    "objectID": "scripts/CETEyeTrackingPowerAnalysis_report.html#predict-dwell-time-by-pro-environmental-attitudes",
    "href": "scripts/CETEyeTrackingPowerAnalysis_report.html#predict-dwell-time-by-pro-environmental-attitudes",
    "title": "CET Eye-Tracking Power Analysis",
    "section": "3.2 Predict Dwell Time by Pro-Environmental Attitudes",
    "text": "3.2 Predict Dwell Time by Pro-Environmental Attitudes\nFigure 5 displays the power curve for prediction relative dwell time on carbon information by pro-environmental attitudes as assessed by SVS Biospheric. The curve is based on an expected effect size that is equal to the observed effect size in the pilot data = 0.0351. The figure shows that with a sample size of about 110 participants, we achieve 95% power to detect an effect that is equal to the one estimated in the pilot data.\n\n\nShow the code\n# number of simulations\nnSims &lt;- 1000\n\n# extend mDecision to include \nm.powC.dwellTime &lt;- simr::extend(\n  m.dwellTime,\n  along = \"ORSEE_code\",\n  n = 1000\n)\n\n# create a power curve data set\npowC.dwellTime.svs &lt;- simr::powerCurve(\n  fit = m.powC.dwellTime,\n  test = fixed(xname = \"svs_biospheric\", method = \"z\"),\n  along = \"ORSEE_code\",\n  breaks = c(15, 30, seq(60, 160, 20)),\n  nsim = nSims,\n  progress = TRUE\n)\n\n# save simulation results in a data frame\ntime &lt;- format(Sys.time(), \"%Y%m%d_%H%M\")\nfileName &lt;- paste0(\"powC.dwellTime.svs\", \"_\", time, \".RData\")\n\nsave(\n  m.powC.dwellTime,\n  powC.dwellTime.svs,\n  file = file.path(\"../data/CETEyeTracking/simr\", fileName)\n)\n\n\n\n\nShow the code\n# load stored simulations (change file name if necessary)\nfileName &lt;- \"powC.dwellTime.svs_20240404_1012.RData\"\nload(file.path(\"../data/CETEyeTracking/simr\", fileName))\n\n# create and display plot\np.powC.dwellTime.svs &lt;- summary(powC.dwellTime.svs) %&gt;% \n  ggplot(aes(\n    x = nlevels,\n    y = mean,\n    ymin = lower,\n    ymax = upper\n  )) +\n  geom_ribbon(fill = \"grey94\", alpha = .8) +\n  geom_errorbar(color = \"grey40\", width = 1.5) +\n  geom_line(color = \"black\") +\n  geom_point() +\n  geom_hline(yintercept = .95, color = \"grey70\", linetype = \"dashed\") +\n  scale_x_continuous(breaks = summary(powC.dwellTime.svs)$nlevels) +\n  scale_y_continuous(\n    limits = c(0, 1),\n    breaks = seq(0, 1, .05),\n    labels = paste0(seq(0, 100, 5), \"%\")\n  ) +\n  labs(\n    x = \"Number of Participants\",\n    y = \"Power\"\n  ) +\n  theme_bw() +\n  theme(\n    panel.grid.minor = element_blank(),\n    panel.border = element_blank(),\n    axis.line = element_line(color = \"black\")\n  )\np.powC.dwellTime.svs\n\n\n\n\n\n\n\n\nFigure 5: Power curve for effect of pro-environmental attitudes as assessed by SVS Biospheric on relative dwell time on carbon information.\n\n\n\n\n\nFigure 6 shows power curves in which the actual effect sizes for SVS Biospheric are 10%, 20%, 30%, 40%, and 50% smaller than the observed effect size in the pilot data. With a sample size of 120, we still achieve 95% power to detect an effect that is 10% smaller than the effect estimated in the pilot data and about 90% power to detect an effect that is 20% smaller than the one estimated in the pilot data.\n\n\nShow the code\n# what is the estimated effect size in our simulated data?\nfixef(m.dwellTime)['svs_biospheric']\n\n# we will choose a smaller effect sizes and save these in new models\n\n# will choose the new effect size to be 10% smaller than in the pilot data\nm.powC.dwellTime.svs_minus10prcnt &lt;- m.powC.dwellTime\nfixef(m.powC.dwellTime.svs_minus10prcnt)[\"svs_biospheric\"] &lt;- (1-.1)*fixef(m.dwellTime)[\"svs_biospheric\"]\n\n# will choose the new effect size to be 20% smaller than in the pilot data\nm.powC.dwellTime.svs_minus20prcnt &lt;- m.powC.dwellTime\nfixef(m.powC.dwellTime.svs_minus20prcnt)[\"svs_biospheric\"] &lt;- (1-.2)*fixef(m.dwellTime)[\"svs_biospheric\"]\n\n# will choose the new effect size to be 30% smaller than in the pilot data\nm.powC.dwellTime.svs_minus30prcnt &lt;- m.powC.dwellTime\nfixef(m.powC.dwellTime.svs_minus30prcnt)[\"svs_biospheric\"] &lt;- (1-.3)*fixef(m.dwellTime)[\"svs_biospheric\"]\n\n# will choose the new effect size to be 40% smaller than in the pilot data\nm.powC.dwellTime.svs_minus40prcnt &lt;- m.powC.dwellTime\nfixef(m.powC.dwellTime.svs_minus40prcnt)[\"svs_biospheric\"] &lt;- (1-.4)*fixef(m.dwellTime)[\"svs_biospheric\"]\n\n# will choose the new effect size to be 50% smaller than in the pilot data\nm.powC.dwellTime.svs_minus50prcnt &lt;- m.powC.dwellTime\nfixef(m.powC.dwellTime.svs_minus50prcnt)[\"svs_biospheric\"] &lt;- (1-.5)*fixef(m.dwellTime)[\"svs_biospheric\"]\n\n\n# test whether simulation will work\ndoTest(m.powC.dwellTime.svs_minus50prcnt, fixed(\"svs_biospheric\", \"z\"))\n\n\n\n\nShow the code\n# how many simulations should be done for each number of subjects?\nn_sims &lt;- 1000\n\n# what are the breaks for number of subjects we would like to calculate power for?\nbreaks_subj &lt;- c(15, 30, seq(60, 160, 20))\n \n# create power curve data sets\n\npowC.dwellTime.svs_minus10prcnt &lt;- powerCurve(\n  fit = m.powC.dwellTime.svs_minus10prcnt,\n  test = fixed(\"svs_biospheric\", method = \"z\"),\n  along = \"ORSEE_code\",\n  breaks = breaks_subj,\n  nsim = n_sims,\n  progress = TRUE\n)\npowC.dwellTime.svs_minus20prcnt &lt;- powerCurve(\n  fit = m.powC.dwellTime.svs_minus20prcnt,\n  test = fixed(\"svs_biospheric\", method = \"z\"),\n  along = \"ORSEE_code\",\n  breaks = breaks_subj,\n  nsim = n_sims,\n  progress = TRUE\n)\npowC.dwellTime.svs_minus30prcnt &lt;- powerCurve(\n  fit = m.powC.dwellTime.svs_minus30prcnt,\n  test = fixed(\"svs_biospheric\", method = \"z\"),\n  along = \"ORSEE_code\",\n  breaks = breaks_subj,\n  nsim = n_sims,\n  progress = TRUE\n)\npowC.dwellTime.svs_minus40prcnt &lt;- powerCurve(\n  fit = m.powC.dwellTime.svs_minus40prcnt,\n  test = fixed(\"svs_biospheric\", method = \"z\"),\n  along = \"ORSEE_code\",\n  breaks = breaks_subj,\n  nsim = n_sims,\n  progress = TRUE\n)\npowC.dwellTime.svs_minus50prcnt &lt;- powerCurve(\n  fit = m.powC.dwellTime.svs_minus50prcnt,\n  test = fixed(\"svs_biospheric\", method = \"z\"),\n  along = \"ORSEE_code\",\n  breaks = breaks_subj,\n  nsim = n_sims,\n  progress = TRUE\n)\n\n# combine power curve data sets\npowC.dwellTime.svs.effectsize &lt;- rbind(\n  summary(powC.dwellTime.svs) %&gt;% \n    mutate(type = \"pilotData\"),\n  summary(powC.dwellTime.svs_minus10prcnt) %&gt;% \n    mutate(type = \"effectsize.minus10%\"),\n  summary(powC.dwellTime.svs_minus20prcnt) %&gt;% \n    mutate(type = \"effectsize.minus20%\"),\n  summary(powC.dwellTime.svs_minus30prcnt) %&gt;% \n    mutate(type = \"effectsize.minus30%\"),\n  summary(powC.dwellTime.svs_minus40prcnt) %&gt;% \n    mutate(type = \"effectsize.minus40%\"),\n  summary(powC.dwellTime.svs_minus50prcnt) %&gt;% \n    mutate(type = \"effectsize.minus50%\")\n)\n\n# save simulation results in a data frame\ntime &lt;- format(Sys.time(), \"%Y%m%d_%H%M\")\nfileName &lt;- paste0(\"powC.dwellTime.svs.effectsize\", \"_\", time, \".RData\")\n\nsave(\n  powC.dwellTime.svs_minus10prcnt,\n  powC.dwellTime.svs_minus20prcnt,\n  powC.dwellTime.svs_minus30prcnt,\n  powC.dwellTime.svs_minus40prcnt,\n  powC.dwellTime.svs_minus50prcnt,\n  powC.dwellTime.svs.effectsize,\n  file = file.path(\"../data/CETEyeTracking/simr\", fileName)\n)\n\n\n\n\nShow the code\n# load stored simulations (change file name if necessary)\nfileName &lt;- \"powC.dwellTime.svs.effectsize_20240403_1912.RData\"\nload(file.path(\"../data/CETEyeTracking/simr\", fileName))\n\n# prepare data for plot: add + 2 on x axis for every type in order to prevent\n# overprinting of errorbars\ndataForPlot &lt;- rbind(\n  filter(powC.dwellTime.svs.effectsize, type == \"pilotData\"),\n  filter(powC.dwellTime.svs.effectsize, type == \"effectsize.minus10%\") %&gt;% \n    mutate(nlevels = nlevels + 1*1),\n  filter(powC.dwellTime.svs.effectsize, type == \"effectsize.minus20%\") %&gt;% \n    mutate(nlevels = nlevels + 2*1),\n  filter(powC.dwellTime.svs.effectsize, type == \"effectsize.minus30%\") %&gt;% \n    mutate(nlevels = nlevels + 3*1),\n  filter(powC.dwellTime.svs.effectsize, type == \"effectsize.minus40%\") %&gt;% \n    mutate(nlevels = nlevels + 4*1),\n  filter(powC.dwellTime.svs.effectsize, type == \"effectsize.minus50%\") %&gt;% \n    mutate(nlevels = nlevels + 5*1)\n)\n# define levels of type\ndataForPlot &lt;- dataForPlot %&gt;% \n  mutate(type = factor(type,\n                       levels = c(\n                         \"pilotData\",\n                         \"effectsize.minus10%\",\n                         \"effectsize.minus20%\",\n                         \"effectsize.minus30%\",\n                         \"effectsize.minus40%\",\n                         \"effectsize.minus50%\"\n                       )))\n\ntmp.legendLabels &lt;- c(\n  paste0(\"pilot data = \", round(fixef(m.dwellTime)['svs_biospheric'], 4)),\n  paste0(\"-\", seq(10, 50, 10), \"% = \", round(fixef(m.dwellTime)['svs_biospheric']*(1-seq(.1, .5, .1)), digits = 4))\n)\n\n# create and display plot\np.powC.dwellTime.svs.effectSizes &lt;- FUNPlotPower(\n  myData= dataForPlot,\n  myLegendTitle = \"Effect Size\",\n  myLegendLabels = tmp.legendLabels\n)\np.powC.dwellTime.svs.effectSizes\n\n\n\n\n\n\n\n\nFigure 6: Power curves for predicting relative dwell time on carbon information by SVS biospheric depending on effect size.\n\n\n\n\n\nFigure 7 displays the power curve for predicting relative dwell time on carbon information by pro-environmental attitudes as assessed by GEB. The curve is based on an expected effect size that is equal to the observed effect size in the pilot data = 0.0154. The figure shows that no reasonable sample size is capable of achieving enough power to detect an effect size that is as small as the one estimated in the pilot data.\n\n\nShow the code\n# number of simulations\nnSims &lt;- 1000\n\n# create a power curve data set\npowC.dwellTime.geb &lt;- simr::powerCurve(\n  fit = m.powC.dwellTime,\n  test = fixed(xname = \"GEB.est\", method = \"z\"),\n  along = \"ORSEE_code\",\n  breaks = c(15, 30, seq(60, 160, 20)),\n  nsim = nSims,\n  progress = TRUE\n)\n\n# save simulation results in a data frame\ntime &lt;- format(Sys.time(), \"%Y%m%d_%H%M\")\nfileName &lt;- paste0(\"powC.dwellTime.geb\", \"_\", time, \".RData\")\n\nsave(\n  powC.dwellTime.geb,\n  file = file.path(\"../data/CETEyeTracking/simr\", fileName)\n)\n\n\n\n\nShow the code\n# load stored simulations (change file name if necessary)\nfileName &lt;- \"powC.dwellTime.geb_20240403_1652.RData\"\nload(file.path(\"../data/CETEyeTracking/simr\", fileName))\n\n# create and display plot\np.powC.dwellTime.geb &lt;- summary(powC.dwellTime.geb) %&gt;% \n  ggplot(aes(\n    x = nlevels,\n    y = mean,\n    ymin = lower,\n    ymax = upper\n  )) +\n  geom_ribbon(fill = \"grey94\", alpha = .8) +\n  geom_errorbar(color = \"grey40\", width = 1.5) +\n  geom_line(color = \"black\") +\n  geom_point() +\n  geom_hline(yintercept = .95, color = \"grey70\", linetype = \"dashed\") +\n  scale_x_continuous(breaks = summary(powC.dwellTime.geb)$nlevels) +\n  scale_y_continuous(\n    limits = c(0, 1),\n    breaks = seq(0, 1, .05),\n    labels = paste0(seq(0, 100, 5), \"%\")\n  ) +\n  labs(\n    x = \"Number of Participants\",\n    y = \"Power\"\n  ) +\n  theme_bw() +\n  theme(\n    panel.grid.minor = element_blank(),\n    panel.border = element_blank(),\n    axis.line = element_line(color = \"black\")\n  )\np.powC.dwellTime.geb\n\n\n\n\n\n\n\n\nFigure 7: Power curve for effect of pro-environmental attitudes as assessed by GEB on relative dwell time on carbon information.\n\n\n\n\n\nFigure 8 displays power curves in which the actual effect sizes for GEB are 20%, 40%, 60%, 80%, and 100% higher than the observed effect size in the pilot data. The figure shows that even for effect sizes that are twice as big as the one estimated in the pilot data, no reasonable sample size seems to reach a minimum of 80% power to detect a true effect. This might be due to the very small effect size of GEB or to high noise in estimating the effect. It is unclear whether this is a peculiarity of the pilot data or a true reflection of the actual associations in the population.\n\n\nShow the code\n# what is the estimated effect size in our simulated data?\nfixef(m.dwellTime)['GEB.est']\n\n# we will choose a greater effect sizes and save these in new models\n\n# will choose the new effect size to be 20% higher than in the pilot data\nm.powC.dwellTime.geb_plus20prcnt &lt;- m.powC.dwellTime\nfixef(m.powC.dwellTime.geb_plus20prcnt)[\"GEB.est\"] &lt;- (1+.2)*fixef(m.dwellTime)[\"GEB.est\"]\n\n# will choose the new effect size to be 40% higher than in the pilot data\nm.powC.dwellTime.geb_plus40prcnt &lt;- m.powC.dwellTime\nfixef(m.powC.dwellTime.geb_plus40prcnt)[\"GEB.est\"] &lt;- (1+.4)*fixef(m.dwellTime)[\"GEB.est\"]\n\n# will choose the new effect size to be 60% higher than in the pilot data\nm.powC.dwellTime.geb_plus60prcnt &lt;- m.powC.dwellTime\nfixef(m.powC.dwellTime.geb_plus60prcnt)[\"GEB.est\"] &lt;- (1+.6)*fixef(m.dwellTime)[\"GEB.est\"]\n\n# will choose the new effect size to be 80% higher than in the pilot data\nm.powC.dwellTime.geb_plus80prcnt &lt;- m.powC.dwellTime\nfixef(m.powC.dwellTime.geb_plus80prcnt)[\"GEB.est\"] &lt;- (1+.8)*fixef(m.dwellTime)[\"GEB.est\"]\n\n# will choose the new effect size to be 100% higher than in the pilot data\nm.powC.dwellTime.geb_plus100prcnt &lt;- m.powC.dwellTime\nfixef(m.powC.dwellTime.geb_plus100prcnt)[\"GEB.est\"] &lt;- (1+1)*fixef(m.dwellTime)[\"GEB.est\"]\n\n\n# test whether simulation will work\ndoTest(m.powC.dwellTime.geb_plus100prcnt, fixed(\"GEB.est\", \"z\"))\n\n\n\n\nShow the code\n# how many simulations should be done for each number of subjects?\nn_sims &lt;- 5\n\n# what are the breaks for number of subjects we would like to calculate power for?\nbreaks_subj &lt;- c(15, 30, seq(60, 160, 20))\n \n# create power curve data sets\n\npowC.dwellTime.geb_plus20prcnt &lt;- powerCurve(\n  fit = m.powC.dwellTime.geb_plus20prcnt,\n  test = fixed(\"GEB.est\", method = \"z\"),\n  along = \"ORSEE_code\",\n  breaks = breaks_subj,\n  nsim = n_sims,\n  progress = TRUE\n)\npowC.dwellTime.geb_plus40prcnt &lt;- powerCurve(\n  fit = m.powC.dwellTime.geb_plus40prcnt,\n  test = fixed(\"GEB.est\", method = \"z\"),\n  along = \"ORSEE_code\",\n  breaks = breaks_subj,\n  nsim = n_sims,\n  progress = TRUE\n)\npowC.dwellTime.geb_plus60prcnt &lt;- powerCurve(\n  fit = m.powC.dwellTime.geb_plus60prcnt,\n  test = fixed(\"GEB.est\", method = \"z\"),\n  along = \"ORSEE_code\",\n  breaks = breaks_subj,\n  nsim = n_sims,\n  progress = TRUE\n)\npowC.dwellTime.geb_plus80prcnt &lt;- powerCurve(\n  fit = m.powC.dwellTime.geb_plus80prcnt,\n  test = fixed(\"GEB.est\", method = \"z\"),\n  along = \"ORSEE_code\",\n  breaks = breaks_subj,\n  nsim = n_sims,\n  progress = TRUE\n)\npowC.dwellTime.geb_plus100prcnt &lt;- powerCurve(\n  fit = m.powC.dwellTime.geb_plus100prcnt,\n  test = fixed(\"GEB.est\", method = \"z\"),\n  along = \"ORSEE_code\",\n  breaks = breaks_subj,\n  nsim = n_sims,\n  progress = TRUE\n)\n\n# combine power curve data sets\npowC.dwellTime.geb.effectsize &lt;- rbind(\n  summary(powC.dwellTime.geb) %&gt;% \n    mutate(type = \"pilotData\"),\n  summary(powC.dwellTime.geb_plus20prcnt) %&gt;% \n    mutate(type = \"effectsize.plus20%\"),\n  summary(powC.dwellTime.geb_plus40prcnt) %&gt;% \n    mutate(type = \"effectsize.plus40%\"),\n  summary(powC.dwellTime.geb_plus60prcnt) %&gt;% \n    mutate(type = \"effectsize.plus60%\"),\n  summary(powC.dwellTime.geb_plus80prcnt) %&gt;% \n    mutate(type = \"effectsize.plus80%\"),\n  summary(powC.dwellTime.geb_plus100prcnt) %&gt;% \n    mutate(type = \"effectsize.plus100%\")\n)\n\n\n# save simulation results in a data frame\ntime &lt;- format(Sys.time(), \"%Y%m%d_%H%M\")\nfileName &lt;- paste0(\"powC.dwellTime.geb.effectsize\", \"_\", time, \".RData\")\n\nsave(\n  powC.dwellTime.geb_plus20prcnt,\n  powC.dwellTime.geb_plus40prcnt,\n  powC.dwellTime.geb_plus60prcnt,\n  powC.dwellTime.geb_plus80prcnt,\n  powC.dwellTime.geb_plus100prcnt,\n  powC.dwellTime.geb.effectsize,\n  file = file.path(\"../data/CETEyeTracking/simr\", fileName)\n)\n\n\n\n\nShow the code\n# load stored simulations (change file name if necessary)\nfileName &lt;- \"powC.dwellTime.geb.effectsize_20240403_1815.RData\"\nload(file.path(\"../data/CETEyeTracking/simr\", fileName))\n\n# prepare data for plot: add + 2 on x axis for every type in order to prevent\n# overprinting of errorbars\ndataForPlot &lt;- rbind(\n  filter(powC.dwellTime.geb.effectsize, type == \"pilotData\"),\n  filter(powC.dwellTime.geb.effectsize, type == \"effectsize.plus20%\") %&gt;% \n    mutate(nlevels = nlevels + 1*1),\n  filter(powC.dwellTime.geb.effectsize, type == \"effectsize.plus40%\") %&gt;% \n    mutate(nlevels = nlevels + 2*1),\n  filter(powC.dwellTime.geb.effectsize, type == \"effectsize.plus60%\") %&gt;% \n    mutate(nlevels = nlevels + 3*1),\n  filter(powC.dwellTime.geb.effectsize, type == \"effectsize.plus80%\") %&gt;% \n    mutate(nlevels = nlevels + 4*1),\n  filter(powC.dwellTime.geb.effectsize, type == \"effectsize.plus100%\") %&gt;% \n    mutate(nlevels = nlevels + 5*1)\n)\n# define levels of type\ndataForPlot &lt;- dataForPlot %&gt;% \n  mutate(type = factor(type,\n                       levels = c(\n                         \"pilotData\",\n                         \"effectsize.plus20%\",\n                         \"effectsize.plus40%\",\n                         \"effectsize.plus60%\",\n                         \"effectsize.plus80%\",\n                         \"effectsize.plus100%\"\n                       )))\n\ntmp.legendLabels &lt;- c(\n  paste0(\"pilot data = \", round(fixef(m.dwellTime)['GEB.est'], 4)),\n  paste0(\"+\", seq(20, 100, 20), \"% = \", round(fixef(m.dwellTime)['GEB.est']*(1+seq(.2, 1, .2)), digits = 4))\n)\n\n# create and display plot\np.powC.dwellTime.geb.effectSizes &lt;- FUNPlotPower(\n  myData= dataForPlot,\n  myLegendTitle = \"Effect Size\",\n  myLegendLabels = tmp.legendLabels\n) +\n  theme(legend.position.inside = c(.15, .7))\np.powC.dwellTime.geb.effectSizes\n\n\n\n\n\n\n\n\nFigure 8: Power curves for predicting relative dwell time on carbon information by GEB depending on effect size."
  },
  {
    "objectID": "scripts/CETEyeTrackingPowerAnalysis_report.html#decision-by-svs-and-dwell-time",
    "href": "scripts/CETEyeTrackingPowerAnalysis_report.html#decision-by-svs-and-dwell-time",
    "title": "CET Eye-Tracking Power Analysis",
    "section": "5.1 Decision by SVS and Dwell Time",
    "text": "5.1 Decision by SVS and Dwell Time\n\n5.1.1 Pilot Data\nWe predict pro-environmental decisions (proenv_decision) by pro-environmental attitudes as assessed by the SVS biospheric (svs_biospheric) and relative dwell time on carbon information (Rel_DT_Carbon) with random intercept for participants (ORSEE_code) and items (trial_id):\n\\[\n\\begin{split}\n  proenv\\_decision \\sim svs\\_biospheric + Rel\\_DT\\_Carbon \\, + \\\\\n  (1 | ORSEE\\_code) + (1 | trial\\_id)\n\\end{split}\n\\tag{3}\\]\nWe then add the interaction term svs_biospheric * Rel_DT_Carbon:\n\\[\n\\begin{split}\n  proenv\\_decision \\sim svs\\_biospheric + Rel\\_DT\\_Carbon \\, + \\\\\n  svs\\_biospheric \\cdot  Rel\\_DT\\_Carbon + (1 | ORSEE\\_code) + (1 | trial\\_id)\n\\end{split}\n\\tag{4}\\]\nModelling decisions according to Equation 3 and Equation 4 yields:\n\n\nShow the code\n# center variables to ease interpretation of main effects in models with interaction\ndata_pilot &lt;- data_pilot %&gt;% \n  mutate(across(\n    .cols = c(svs_biospheric, Rel_DT_Carbon, nb_transition),\n    .fns = \\(x) scale(x, center = TRUE, scale = TRUE),\n    .names = \"{.col}_scaled\"\n  ))\n\n# estimate model with main effects\nm.decision.attitudesDT &lt;- lme4::glmer(\n  formula = proenv_decision ~ svs_biospheric_scaled + Rel_DT_Carbon_scaled +\n    (1 | ORSEE_code) + (1 | trial_id),\n  data = data_pilot,\n  family = binomial(link = \"logit\")\n)\n\n# estimate model with interaction effect\nm.decision.attitudesDTinteraction &lt;- lme4::glmer(\n  formula = proenv_decision ~ svs_biospheric_scaled * Rel_DT_Carbon_scaled +\n    (1 | ORSEE_code) + (1 | trial_id),\n  data = data_pilot,\n  family = binomial(link = \"logit\")\n)\n\n# print results (show log-odds and not odds ratio)\nsjPlot::tab_model(\n  m.decision.attitudesDT,\n  m.decision.attitudesDTinteraction,\n  transform = NULL\n)\n\n\n\n\n \nproenv decision\nproenv decision\n\n\nPredictors\nLog-Odds\nCI\np\nLog-Odds\nCI\np\n\n\n(Intercept)\n2.25\n0.68 – 3.83\n0.005\n2.27\n0.69 – 3.84\n0.005\n\n\nsvs biospheric scaled\n3.18\n1.73 – 4.63\n&lt;0.001\n3.17\n1.72 – 4.62\n&lt;0.001\n\n\nRel DT Carbon scaled\n0.32\n-0.15 – 0.80\n0.184\n0.31\n-0.20 – 0.81\n0.235\n\n\nsvs biospheric scaled ×Rel DT Carbon scaled\n\n\n\n-0.06\n-0.60 – 0.48\n0.830\n\n\nRandom Effects\n\n\n\nσ2\n3.29\n3.29\n\n\n\nτ00\n8.10 trial_id\n8.12 trial_id\n\n\n\n4.77 ORSEE_code\n4.75 ORSEE_code\n\n\nICC\n0.80\n0.80\n\n\nN\n15 ORSEE_code\n15 ORSEE_code\n\n\n\n36 trial_id\n36 trial_id\n\nObservations\n539\n539\n\n\nMarginal R2 / Conditional R2\n0.402 / 0.878\n0.401 / 0.878\n\n\n\n\n\n\nAs displayed in Figure 9, the positive effect of relative dwell time on carbon information on pro-environmental decision tends to be stronger among participants that score lower in pro-environmental attitudes as assessed by SVS Biospheric. This is also reflected in the negative log-odds estimate of the interaction term (-0.06).\n\n\nShow the code\nsjPlot::plot_model(\n  model = m.decision.attitudesDTinteraction,\n  type = \"pred\",\n  terms = c(\"Rel_DT_Carbon_scaled[all]\", \"svs_biospheric_scaled\"),\n  mdrt.values = \"meansd\",\n  alpha = 0\n) +\n  theme_bw() +\n  theme(\n    plot.title = element_blank(),\n    panel.border = element_blank(),\n    axis.line = element_line(color = \"black\")\n  )\n\n\n\n\n\n\n\n\nFigure 9: Predicted probability of making a pro-environmental choice depending on the pro-environmental attitude assessed by the SVS biospheric and the relative dwell time on carbon information.\n\n\n\n\n\n\n\n5.1.2 Power Simulations\nFigure 10 displays the power curve for the main effect of relative dwell time on pro-environmental decisions, controlling for pro-environmental attitudes assessed by SVS Biospheric (#eq-m.decision.attitudesDT). The curve is based on an expected effect size that is equal to the observed effect size in the pilot data = 0.324 (log-odds).\nThe figure shows that a sample size of 100 participants would achieve 95% power to detect a true effect size that is equal to the one estimated in the pilot data.\n\n\nShow the code\n# number of simulations\nnSims &lt;- 5\n\n# extend mDecision to include \nm.powC.decision.attitudesDT &lt;- simr::extend(\n  m.decision.attitudesDT,\n  along = \"ORSEE_code\",\n  n = 1000\n)\n\n# create a power curve data set\npowC.decision.attitudesDT &lt;- simr::powerCurve(\n  fit = m.powC.decision.attitudesDT,\n  test = fixed(xname = \"Rel_DT_Carbon_scaled\", method = \"z\"),\n  along = \"ORSEE_code\",\n  breaks = c(15, 30, seq(60, 160, 20)),\n  nsim = nSims,\n  progress = TRUE\n)\n\n# save simulation results in a data frame\ntime &lt;- format(Sys.time(), \"%Y%m%d_%H%M\")\nfileName &lt;- paste0(\"powC.decision.attitudesDT\", \"_\", time, \".RData\")\n\nsave(\n  m.powC.decision.attitudesDT,\n  powC.decision.attitudesDT,\n  file = file.path(\"../data/CETEyeTracking/simr\", fileName)\n)\n\n\n\n\nShow the code\n# load stored simulations (change file name if necessary)\nfileName &lt;- \"powC.decision.attitudesDT_20240405_1436.RData\"\nload(file.path(\"../data/CETEyeTracking/simr\", fileName))\n\n# create and display plot\np.powC.decision.attitudesDT &lt;- summary(powC.decision.attitudesDT) %&gt;% \n  ggplot(aes(\n    x = nlevels,\n    y = mean,\n    ymin = lower,\n    ymax = upper\n  )) +\n  geom_ribbon(fill = \"grey94\", alpha = .8) +\n  geom_errorbar(color = \"grey40\", width = 1.5) +\n  geom_line(color = \"black\") +\n  geom_point() +\n  geom_hline(yintercept = .95, color = \"grey70\", linetype = \"dashed\") +\n  scale_x_continuous(breaks = summary(powC.decision.attitudesDT)$nlevels) +\n  scale_y_continuous(\n    limits = c(0, 1),\n    breaks = seq(0, 1, .05),\n    labels = paste0(seq(0, 100, 5), \"%\")\n  ) +\n  labs(\n    x = \"Number of Participants\",\n    y = \"Power\"\n  ) +\n  theme_bw() +\n  theme(\n    panel.grid.minor = element_blank(),\n    panel.border = element_blank(),\n    axis.line = element_line(color = \"black\")\n  )\np.powC.decision.attitudesDT\n\n\n\n\n\n\n\n\nFigure 10: Power curve for the effect of relative dwell time on pro-environmental decisions controlling for pro-environmental attitudes (SVS Biospheric).\n\n\n\n\n\nFigure 11 displays the power curve for the interaction effect of pro-environmental attitudes assessed by SVS Biospheric and relative dwell time on carbon information in predicting pro-environmental decisions (#eq-m.decision.attitudesDTinteraction). The curve is based on an expected effect size that is equal to the observed effect size in the pilot data = -0.0596 (log-odds). The figure shows that the interaction effect is too small to be reliably be detected by a reasonable sample size.\n\n\nShow the code\n# number of simulations\nnSims &lt;- 5\n\n# extend mDecision to include \nm.powC.decision.attitudesDTinteraction &lt;- simr::extend(\n  m.decision.attitudesDTinteraction,\n  along = \"ORSEE_code\",\n  n = 1000\n)\n\n# create a power curve data set\npowC.decision.attitudesDTinteraction &lt;- simr::powerCurve(\n  fit = m.powC.decision.attitudesDTinteraction,\n  test = fixed(xname = \"svs_biospheric_scaled:Rel_DT_Carbon_scaled\", method = \"z\"),\n  along = \"ORSEE_code\",\n  breaks = c(15, 30, seq(60, 160, 20)),\n  nsim = nSims,\n  progress = TRUE\n)\n\n# save simulation results in a data frame\ntime &lt;- format(Sys.time(), \"%Y%m%d_%H%M\")\nfileName &lt;- paste0(\"powC.decision.attitudesDTinteraction\", \"_\", time, \".RData\")\n\nsave(\n  m.powC.decision.attitudesDTinteraction,\n  powC.decision.attitudesDTinteraction,\n  file = file.path(\"../data/CETEyeTracking/simr\", fileName)\n)\n\n\n\n\nShow the code\n# load stored simulations (change file name if necessary)\nfileName &lt;- \"powC.decision.attitudesDTinteraction_20240404_2102.RData\"\nload(file.path(\"../data/CETEyeTracking/simr\", fileName))\n\n# create and display plot\np.powC.decision.attitudesDTinteraction &lt;- summary(powC.decision.attitudesDTinteraction) %&gt;% \n  ggplot(aes(\n    x = nlevels,\n    y = mean,\n    ymin = lower,\n    ymax = upper\n  )) +\n  geom_ribbon(fill = \"grey94\", alpha = .8) +\n  geom_errorbar(color = \"grey40\", width = 1.5) +\n  geom_line(color = \"black\") +\n  geom_point() +\n  geom_hline(yintercept = .95, color = \"grey70\", linetype = \"dashed\") +\n  scale_x_continuous(breaks = summary(powC.decision.attitudesDTinteraction)$nlevels) +\n  scale_y_continuous(\n    limits = c(0, 1),\n    breaks = seq(0, 1, .05),\n    labels = paste0(seq(0, 100, 5), \"%\")\n  ) +\n  labs(\n    x = \"Number of Participants\",\n    y = \"Power\"\n  ) +\n  theme_bw() +\n  theme(\n    panel.grid.minor = element_blank(),\n    panel.border = element_blank(),\n    axis.line = element_line(color = \"black\")\n  )\np.powC.decision.attitudesDTinteraction\n\n\n\n\n\n\n\n\nFigure 11: Power curve for interaction effect of pro-environmental attitudes (SVS Biospheric) and relative dwell time on pro-environmental decisions."
  },
  {
    "objectID": "scripts/CETEyeTrackingPowerAnalysis_report.html#transistions-as-attention-measure",
    "href": "scripts/CETEyeTrackingPowerAnalysis_report.html#transistions-as-attention-measure",
    "title": "CET Eye-Tracking Power Analysis",
    "section": "5.2 Transistions as attention measure",
    "text": "5.2 Transistions as attention measure\nFirst, we predict pro-environmental decisions (proenv_decision) by the number of transitions between carbon and bonus information (nb_transition) with random intercept for participants (ORSEE_code) and items (trial_id):\n\\[\nproenv\\_decision \\sim nb\\_transition + (1 | ORSEE\\_code) + (1 | trial\\_id)\n\\tag{5}\\]\nSecond, we predict the number of transitions between carbon and bonus information by pro-environmental attitudes (biospheric subscale of Schwartz Value Scale: svs_biospheric; General Ecologic Behavior scale: GEB.est) with random intercepts for participants and items:\n\\[\nnb\\_transition \\sim svs\\_biospheric + GEB.est + (1 | ORSEE\\_code) + (1 | trial\\_id)\n\\tag{6}\\]\n\n5.2.1 Decision ~ Transitions\nPredicting pro-environmental decisions by number of transitions between carbon and bonus information according to Equation 5 yields:\n\n\nShow the code\n# estimate model\nm.decision.transition &lt;- lme4::glmer(\n  formula = proenv_decision ~ nb_transition +\n    (1 | ORSEE_code) + (1 | trial_id),\n  data = data_pilot,\n  family = binomial(link = \"logit\")\n)\n\n# print results (show log-odds and not odds ratio)\nsjPlot::tab_model(m.decision.transition, transform = NULL)\n\n\n\n\n \nproenv decision\n\n\nPredictors\nLog-Odds\nCI\np\n\n\n(Intercept)\n2.98\n0.55 – 5.41\n0.016\n\n\nnb transition\n-0.21\n-0.38 – -0.03\n0.023\n\n\nRandom Effects\n\n\n\nσ2\n3.29\n\n\n\nτ00 trial_id\n7.68\n\n\nτ00 ORSEE_code\n16.18\n\n\nICC\n0.88\n\n\nN ORSEE_code\n15\n\n\nN trial_id\n36\n\nObservations\n539\n\n\nMarginal R2 / Conditional R2\n0.007 / 0.880\n\n\n\n\n\n\nAs displayed in Figure 12, the higher the number of transitions between carbon and bonus information, the less likely participants chose the pro-environmental option. This is also reflected in the negative log-odds estimate of nb_transition = -0.21.\n\n\nShow the code\nsjPlot::plot_model(\n  model = m.decision.transition,\n  type = \"eff\",\n  terms = \"nb_transition\",\n  color = \"black\",\n  alpha = 0\n) +\n  theme_bw() +\n  theme(\n    plot.title = element_blank(),\n    panel.border = element_blank(),\n    axis.line = element_line(color = \"black\")\n  )\n\n\n\n\n\n\n\n\nFigure 12: Predicted probability of making a pro-environmental decision depending on the number of transitions between carbon and bonus information.\n\n\n\n\n\n\n\n5.2.2 Transition ~ Attitudes\nPredicting number of transitions between carbon and bonus information by pro-environmental attitudes according to Equation 6 yields:\n\n\nShow the code\n# estimate model\nm.dwellTime.transition &lt;- lmer(\n  formula = nb_transition ~ GEB.est + svs_biospheric +\n    (1 | ORSEE_code) + (1 | trial_id),\n  data = data_pilot\n)\n\n# print results\nsjPlot::tab_model(m.dwellTime.transition, digits.re = 4)\n\n\n\n\n \nnb transition\n\n\nPredictors\nEstimates\nCI\np\n\n\n(Intercept)\n2.78\n0.98 – 4.59\n0.003\n\n\nGEB est\n-0.73\n-1.48 – 0.02\n0.058\n\n\nsvs biospheric\n0.20\n-0.20 – 0.60\n0.333\n\n\nRandom Effects\n\n\n\nσ2\n2.7168\n\n\n\nτ00 trial_id\n0.2930\n\n\nτ00 ORSEE_code\n1.3138\n\n\nICC\n0.3716\n\n\nN ORSEE_code\n15\n\n\nN trial_id\n36\n\nObservations\n539\n\n\nMarginal R2 / Conditional R2\n0.072 / 0.417\n\n\n\n\n\n\nAs displayed in Figure 13 Panel A, the higher pro-environmental attitudes are as measures by the SVS biospheric, the more participants transition between carbon and bonus information. This is also reflected in the positive estimate of svs_biospheric = 0.2. As displayed in Figure 13 Panel B, a opposite relationship holds for pro-environmental attitudes as assessed by GEB: GEB.est = -0.73.\n\n\nShow the code\np.dwellTime.transition.svs &lt;- sjPlot::plot_model(\n  model = m.dwellTime.transition,\n  type = \"eff\",\n  terms = \"svs_biospheric\",\n  color = \"black\",\n  alpha = 0\n) +\n  theme_bw() +\n  theme(\n    plot.title = element_blank(),\n    panel.border = element_blank(),\n    axis.line = element_line(color = \"black\")\n  )\n\np.dwellTime.transition.geb &lt;- sjPlot::plot_model(\n  model = m.dwellTime.transition,\n  type = \"eff\",\n  terms = \"GEB.est\",\n  color = \"black\",\n  alpha = 0\n) +\n  theme_bw() +\n  theme(\n    plot.title = element_blank(),\n    panel.border = element_blank(),\n    axis.line = element_line(color = \"black\")\n  )\n\nggarrange(\n  p.dwellTime.transition.svs,\n  p.dwellTime.transition.geb,\n  ncol = 2,\n  labels = c(\"A\", \"B\")\n)\n\n\n\n\n\n\n\n\nFigure 13: Predicted probability of making a pro-environmental choice depending on the relative dwell time on carbon information.\n\n\n\n\n\n\n\n5.2.3 Decision by SVS and Transitions\n\n5.2.3.1 Pilot Data\nWe predict pro-environmental decisions (proenv_decision) by pro-environmental attitudes as assessed by the SVS biospheric (svs_biospheric) and number of transistions between carbon and bonus information (nb_transition) with random intercept for participants (ORSEE_code) and items (trial_id):\n\\[\n\\begin{split}\n  proenv\\_decision \\sim svs\\_biospheric + nb\\_transition \\, + \\\\\n  (1 | ORSEE\\_code) + (1 | trial\\_id)\n\\end{split}\n\\tag{7}\\]\nWe then add the interaction term svs_biospheric * nb_transition:\n\\[\n\\begin{split}\n  proenv\\_decision \\sim svs\\_biospheric + nb\\_transition \\, + \\\\\n  svs\\_biospheric \\cdot  nb\\_transition + (1 | ORSEE\\_code) + (1 | trial\\_id)\n\\end{split}\n\\tag{8}\\]\nModelling decisions according to Equation 7 and Equation 8 yields:\n\n\nShow the code\n# estimate model with main effects\nm.decision.attitudesTransition &lt;- lme4::glmer(\n  formula = proenv_decision ~ svs_biospheric_scaled + nb_transition_scaled +\n    (1 | ORSEE_code) + (1 | trial_id),\n  data = data_pilot,\n  family = binomial(link = \"logit\")\n)\n\n# estimate model with interaction effect\nm.decision.attitudesTransitionInteraction &lt;- lme4::glmer(\n  formula = proenv_decision ~ svs_biospheric_scaled * nb_transition_scaled +\n    (1 | ORSEE_code) + (1 | trial_id),\n  data = data_pilot,\n  family = binomial(link = \"logit\")\n)\n\n# print results (show log-odds and not odds ratio)\nsjPlot::tab_model(\n  m.decision.attitudesTransition,\n  m.decision.attitudesTransitionInteraction,\n  transform = NULL\n)\n\n\n\n\n \nproenv decision\nproenv decision\n\n\nPredictors\nLog-Odds\nCI\np\nLog-Odds\nCI\np\n\n\n(Intercept)\n2.36\n0.78 – 3.94\n0.003\n2.44\n0.90 – 3.97\n0.002\n\n\nsvs biospheric scaled\n3.32\n1.85 – 4.79\n&lt;0.001\n3.24\n1.84 – 4.64\n&lt;0.001\n\n\nnb transition scaled\n-0.45\n-0.82 – -0.08\n0.016\n-0.47\n-0.85 – -0.09\n0.015\n\n\nsvs biospheric scaled ×nb transition scaled\n\n\n\n-0.48\n-1.04 – 0.07\n0.088\n\n\nRandom Effects\n\n\n\nσ2\n3.29\n3.29\n\n\n\nτ00\n7.72 trial_id\n7.75 trial_id\n\n\n\n4.90 ORSEE_code\n4.27 ORSEE_code\n\n\nICC\n0.79\n0.79\n\n\nN\n15 ORSEE_code\n15 ORSEE_code\n\n\n\n36 trial_id\n36 trial_id\n\nObservations\n539\n539\n\n\nMarginal R2 / Conditional R2\n0.413 / 0.879\n0.437 / 0.879\n\n\n\n\n\n\nAs displayed in Figure 14, the negative effect of number of transitions between carbon and bonus information on pro-environmental decisions tends to be weaker among participants that score lower in pro-environmental attitudes as assessed by SVS Biospheric. This is also reflected in the negative log-odds estimate of the interaction term (-0.48). For an alternative (but statistically equivalent) visualization, see Figure 15, suggesting the interpretation that the positive effect of pro-environmental attitudes on pro-environmental decisions is stronger among participants that transition less between carbon and bonus information (e.g., strategic pro-environmental deliberate ignorance to not become tempted to act selfishly?)\n\n\nShow the code\nsjPlot::plot_model(\n  model = m.decision.attitudesTransitionInteraction,\n  type = \"pred\",\n  terms = c(\"nb_transition_scaled[all]\", \"svs_biospheric_scaled\"),\n  mdrt.values = \"meansd\",\n  alpha = 0\n) +\n  theme_bw() +\n  theme(\n    plot.title = element_blank(),\n    panel.border = element_blank(),\n    axis.line = element_line(color = \"black\")\n  )\n\n\n\n\n\n\n\n\nFigure 14: Predicted probability of making a pro-environmental choice depending on the pro-environmental attitude assessed by the SVS biospheric and the number of transitions between carbon and bonus information.\n\n\n\n\n\n\n\nShow the code\nsjPlot::plot_model(\n  model = m.decision.attitudesTransitionInteraction,\n  type = \"pred\",\n  terms = c(\"svs_biospheric_scaled[all]\", \"nb_transition_scaled\"),\n  # mdrt.values = \"meansd\",\n  alpha = 0\n) +\n  theme_bw() +\n  theme(\n    plot.title = element_blank(),\n    panel.border = element_blank(),\n    axis.line = element_line(color = \"black\")\n  )\n\n\n\n\n\n\n\n\nFigure 15: Predicted probability of making a pro-environmental choice depending on the pro-environmental attitude assessed by the SVS biospheric and the number of transitions between carbon and bonus information. In contrast to Figure 14, attitudes are displayed on the x-axis, visualizing the implication that the effect of pro-environmental attitudes on pro-environmental choice is moderated by attention.\n\n\n\n\n\n\n\n5.2.3.2 Power Simulations\nFigure 16 displays the power curve for the main effect of the number of transitions between carbon and bonus information on pro-environmental decisions, controlling for pro-environmental attitudes assessed by SVS Biospheric (Equation 7). The curve is based on an expected effect size that is equal to the observed effect size in the pilot data = -0.4525 (log-odds).\nThe figure shows that a sample size of 100 participants would achieve 95% power to detect a true effect size that is equal to the one estimated in the pilot data.\n\n\nShow the code\n# number of simulations\nnSims &lt;- 5\n\n# extend mDecision to include \nm.powC.decision.attitudesTransition &lt;- simr::extend(\n  m.decision.attitudesTransition,\n  along = \"ORSEE_code\",\n  n = 1000\n)\n\n# create a power curve data set\npowC.decision.attitudesTransition &lt;- simr::powerCurve(\n  fit = m.powC.decision.attitudesTransition,\n  test = fixed(xname = \"nb_transition_scaled\", method = \"z\"),\n  along = \"ORSEE_code\",\n  breaks = c(15, 30, seq(60, 160, 20)),\n  nsim = nSims,\n  progress = TRUE\n)\n\n# save simulation results in a data frame\ntime &lt;- format(Sys.time(), \"%Y%m%d_%H%M\")\nfileName &lt;- paste0(\"powC.decision.attitudesTransition\", \"_\", time, \".RData\")\n\nsave(\n  m.powC.decision.attitudesTransition,\n  powC.decision.attitudesTransition,\n  file = file.path(\"../data/CETEyeTracking/simr\", fileName)\n)\n\n\n\n\nShow the code\n# load stored simulations (change file name if necessary)\nfileName &lt;- \"powC.decision.attitudesTransition_20240405_1645.RData\"\nload(file.path(\"../data/CETEyeTracking/simr\", fileName))\n\n# create and display plot\np.powC.decision.attitudesTransition &lt;- summary(powC.decision.attitudesTransition) %&gt;% \n  ggplot(aes(\n    x = nlevels,\n    y = mean,\n    ymin = lower,\n    ymax = upper\n  )) +\n  geom_ribbon(fill = \"grey94\", alpha = .8) +\n  geom_errorbar(color = \"grey40\", width = 1.5) +\n  geom_line(color = \"black\") +\n  geom_point() +\n  geom_hline(yintercept = .95, color = \"grey70\", linetype = \"dashed\") +\n  scale_x_continuous(breaks = summary(powC.decision.attitudesTransition)$nlevels) +\n  scale_y_continuous(\n    limits = c(0, 1),\n    breaks = seq(0, 1, .05),\n    labels = paste0(seq(0, 100, 5), \"%\")\n  ) +\n  labs(\n    x = \"Number of Participants\",\n    y = \"Power\"\n  ) +\n  theme_bw() +\n  theme(\n    panel.grid.minor = element_blank(),\n    panel.border = element_blank(),\n    axis.line = element_line(color = \"black\")\n  )\np.powC.decision.attitudesTransition\n\n\n\n\n\n\n\n\nFigure 16: Power curve for main effect of the number of transitions between carbon and bonus information on pro-environmental decisions, controlling for pro-environmental attitudes (SVS Biospheric).\n\n\n\n\n\nFigure 17 displays the power curve for the interaction effect of pro-environmental attitudes assessed by SVS Biospheric and the number of transitions between carbon and bonus information in predicting pro-environmental decisions (Equation 8). The curve is based on an expected effect size that is equal to the observed effect size in the pilot data = -0.4843 (log-odds).\nThe figure shows that a sample size of 100 participants would achieve 95% power to detect a true effect size that is equal to the one estimated in the pilot data.\n\n\nShow the code\n# number of simulations\nnSims &lt;- 5\n\n# extend mDecision to include \nm.powC.decision.attitudesTransitionInteraction &lt;- simr::extend(\n  m.decision.attitudesTransitionInteraction,\n  along = \"ORSEE_code\",\n  n = 1000\n)\n\n# create a power curve data set\npowC.decision.attitudesTransitionInteraction &lt;- simr::powerCurve(\n  fit = m.powC.decision.attitudesTransitionInteraction,\n  test = fixed(xname = \"svs_biospheric_scaled:nb_transition_scaled\", method = \"z\"),\n  along = \"ORSEE_code\",\n  breaks = c(15, 30, seq(60, 160, 20)),\n  nsim = nSims,\n  progress = TRUE\n)\n\n# save simulation results in a data frame\ntime &lt;- format(Sys.time(), \"%Y%m%d_%H%M\")\nfileName &lt;- paste0(\"powC.decision.attitudesTransitionInteraction\", \"_\", time, \".RData\")\n\nsave(\n  m.powC.decision.attitudesTransitionInteraction,\n  powC.decision.attitudesTransitionInteraction,\n  file = file.path(\"../data/CETEyeTracking/simr\", fileName)\n)\n\n\n\n\nShow the code\n# load stored simulations (change file name if necessary)\nfileName &lt;- \"powC.decision.attitudesTransitionInteraction_20240405_1233.RData\"\nload(file.path(\"../data/CETEyeTracking/simr\", fileName))\n\n# create and display plot\np.powC.decision.attitudesTransitionInteraction &lt;- summary(powC.decision.attitudesTransitionInteraction) %&gt;% \n  ggplot(aes(\n    x = nlevels,\n    y = mean,\n    ymin = lower,\n    ymax = upper\n  )) +\n  geom_ribbon(fill = \"grey94\", alpha = .8) +\n  geom_errorbar(color = \"grey40\", width = 1.5) +\n  geom_line(color = \"black\") +\n  geom_point() +\n  geom_hline(yintercept = .95, color = \"grey70\", linetype = \"dashed\") +\n  scale_x_continuous(breaks = summary(powC.decision.attitudesTransitionInteraction)$nlevels) +\n  scale_y_continuous(\n    limits = c(0, 1),\n    breaks = seq(0, 1, .05),\n    labels = paste0(seq(0, 100, 5), \"%\")\n  ) +\n  labs(\n    x = \"Number of Participants\",\n    y = \"Power\"\n  ) +\n  theme_bw() +\n  theme(\n    panel.grid.minor = element_blank(),\n    panel.border = element_blank(),\n    axis.line = element_line(color = \"black\")\n  )\np.powC.decision.attitudesTransitionInteraction\n\n\n\n\n\n\n\n\nFigure 17: Power curve for interaction effect of pro-environmental attitudes (SVS Biospheric) and number of transitions between carbon and bonsu information on pro-environmental decisions."
  },
  {
    "objectID": "scripts/CETEyeTrackingPowerAnalysis_report.html#footnotes",
    "href": "scripts/CETEyeTrackingPowerAnalysis_report.html#footnotes",
    "title": "CET Eye-Tracking Power Analysis",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nNote that in principle, we could conduct a power analysis for each attentional measure seperately, i.e., a power analysis for frequency, transitions, fixation, … However, this would be a more tedious task than is necessary for a power analysis whose goal it is to guess an appropriate number of participants. One prominent attentional measure will do the job, i.e., dwell time.↩︎"
  },
  {
    "objectID": "scripts/EcoTRACEPowerAnalysis_report.html",
    "href": "scripts/EcoTRACEPowerAnalysis_report.html",
    "title": "EcoTRACE Power Simulations",
    "section": "",
    "text": "Show the code\n# install package librarian if needed\nif (!(\"librarian\" %in% rownames(installed.packages()))) {\n  install.packages(\"librarian\")\n}\n\n# load required packages\nlibrarian::shelf(\n  tidyverse,\n  tictoc,\n  faux,\n  lme4,\n  afex,\n  broom.mixed,\n  sjPlot,\n  ggpubr,\n  ggthemes,\n  DT,\n  simr,\n  latex2exp\n)"
  },
  {
    "objectID": "scripts/EcoTRACEPowerAnalysis_report.html#simulation-functions",
    "href": "scripts/EcoTRACEPowerAnalysis_report.html#simulation-functions",
    "title": "EcoTRACE Power Simulations",
    "section": "2.1 Simulation Functions",
    "text": "2.1 Simulation Functions\n\n2.1.1 Simulate Dwell Time on Carbon Information\nWe first need to simulate data representing how much time participants spend on gathering information regarding carbon outcomes. The choice for the default parameter values is justified as follows:\n\nn_subj: Number of subjects. By default, we simulate data coming from 100 subjects. This seems to be a reasonable starting point for our simulations. Variations on sample size and its effects on power will be the topic of our power analyses.\nn_subj_prop: Proportion of republican and democrat subjects. The first number represents the proportion of republicans and the second the number of democrats (Their sum needs to add up to 1). By default, we expect a balanced proportion (c(0.50, 0.50)) since we are aiming for a balanced sample. Variations on this assumption could be tested in our power analyses.\nn_item: Number of unique items in the Carbon Emission Task. As in the original Carbon Emission Task (Berger and Wyss 2021), we are planning on using a fully crossed design combining 5 levels of relative carbon outcome differences (10%, 15%, 20%, 50%, and 100%) and 5 levels of relative bonus outcome differences (same levels) between options A and B, that is 25 items. In principle, this number could be changed as well. In order to keep the structure of a fully crossed design, the number of trials should be the square of the number of levels of relative differences we would like to use (e.g., 9, 16, 25, 36, …)\nbeta_0_c: Fixed intercept (grand mean) for dwell time. This value represents the number of seconds that subjects over all (irrespective of political orientation) spend on gathering carbon information in each choice situation (the effect of political orientation will be modeled as deviation from this grand mean). In a previous mouselabWEB study that follows a similar design (two options with two attributes) to study intertemporal choice (Reeck, Wall, and Johnson 2017), study authors reported that subjects on average spent 7.3 seconds (SD = 1.1) acquiring information and making a decision. Based on this information, we define our defaults based on the expectation that subjects in total spend about 7 seconds for each choice. As a starting point, we simulate that subjects over all (irrespective of political orientation) spend about half of this time (3.5 seconds) on gathering carbon outcome information.\nbeta_p_c: Fixed effect of political orientation on dwell time: This value represents the difference in average dwell times on carbon information between democrats and republicans (democrats - republicans). Coming up with a well-informed expectation of this effect is very difficult since no previous studies investigated the effect of political orientation on such information-seeking processes in a task with real environmental consequences. We therefore base our default value on a smallest effect size of interest informed by theoretical considerations (Lakens 2022). In mouselabWEB studies, it is a standard practice to filter out any information acquisition lasting less than about 200 msec because such very short (spurious) acquisitions are very unlikely to be consciously processed (Willemsen and Johnson 2019). Thus, we define 0.2 seconds as a default difference in dwell time between democrats and republicans that could likely still reflect differences in conscious information gathering processes. Of course, we can study how varying this difference affects our power.\nsubj_0_c: By-subject random intercept SD for dwell time: We simulate that a subject’s deviation from the grand mean for dwell time follows a normal distribution with a mean of 0 and a standard deviation of subj_0_c. Again, hypothesizing what this standard deviation will be, is very difficult. We base our default value on values reported in Reeck, Wall, and Johnson (2017). They investigated whether variability in information search behavior is driven predominantly by differences in the features of a choice (e.g., in our case: the relative differences between carbon and bonus outcomes in options A and B) or by individual differences. To this end, they predicted information acquisition using a intercept-only model that included random intercepts for subjects and items.3 They estimated the random intercept of subjects to be 0.29 (95%-CI = 0.26-0.32). The estimated random intercept for items was 0.04 (95%-CI = 0.02-0.06). That is, the subject random effect was about 6 times higher than the item random effect, demonstrating that individual differences played a more important role in determining search behavior than the features of the options being presented. Therefore, we set our default value for the by-subject random intercept SD (0.25, i.e. 7.25% of the fixed intercept)4 to be about six times the size of the by-item random intercept (0.04, see below).\nsubj_p_c: By-subject random slope SD for dwell time: Most probably, the effect of political orientation on carbon information dwell time will differ between participants. The distribution of this random slope is difficult to guess a priori given the sparse previous literature that could inform our study. As a (conservative) default, we model the SD of the random slope to be as big as the fixed effect itself, i.e. 0.20. That is, we expect that for about 2/3 of subjects, the effect of political orientation lies between 0.2 - 0.2 = 0 and 0.2 + 0.2 = 0.4.\nsubj_rho_c: By-subject random effects correlation: Since we model that not only the fixed intercept but also the fixed effect of political orientation can vary between subjects, it is possible that subjects’ random intercepts and slopes are correlated. For simplicity’s sake, however, we will assume no correlation (0.00). Note, however, that such correlations could easily be modeled as well – and there might be good reason to do so.5\nitem_0_c: By-item random intercept SD for dwell time: Based on considerations explained above, we set this value to (1/6)*subj_0_c = 0.04.\nsigma_c: Trial-level noise (error) SD: Following suggestions by DeBruine and Barr (2021), we model this error standard deviation to be twice the size of the by-subject variance components, i.e., to 2*(0.25 + 0.2) = 0.9.\n\n\n\nShow the code\n# set up the custom data simulation function for dwell time carbon\nFUN_sim_dwellTimeCarbon &lt;- function(\n  n_subj       =       100, # number of subjects\n  n_subj_prop  = c(.5, .5), # proportion of republican and democrat subjects\n  n_item       =        25, # number of items\n  beta_0_c     =       3.5, # intercept (grand mean) for dwell time (dt) carbon\n  beta_p_c     =       .20, # effect of political orientation on dt carbon\n  subj_0_c     =       .25, # by-subject random intercept sd for dt carbon\n  subj_p_c     =       .20, # by-subject random slope sd for dt carbon\n  subj_rho_c   =       .00, # by-subject random effects correlations for dt carbon\n  item_0_c     =       .04, # by-item random intercept sd\n  sigma_c      =        .9, # residual (error) sd\n  \n  options = list(\n    truncNegNums = FALSE    # set negative numbers to zero (no negative dwell times)\n  )\n) {\n  \n  # simulate data for dwell time on carbon information\n  dat_c &lt;- \n    # add random factor subject\n    add_random(subj = n_subj) %&gt;% \n    # add random factor item\n    add_random(item = n_item) %&gt;% \n    # add between-subject factor political orientation (with anova contrast)\n    # note that it is important that we set .shuffle = FALSE. This way, the first n_subj_prop\n    # will be assigned polOri = rep and the rest will be assigned polOri = dem.\n    # if we do not follow this procedure, then it can and will happen that in the\n    # FUN_sim_dwellTimeBonus the same subject is assigned a different political orientation!\n    add_between(\"subj\", polOri = c(\"rep\", \"dem\"), .prob = n_subj_prop*n_subj, .shuffle = FALSE) %&gt;% \n    add_contrast(\"polOri\", colnames = \"X_p\", contrast = \"anova\") %&gt;% \n    # add by-subject random intercept and slope\n    add_ranef(\"subj\", S_0_c = subj_0_c, S_p_c = subj_p_c, .cors = subj_rho_c) %&gt;% \n    # add by-item random intercept\n    add_ranef(\"item\", I_0_c = item_0_c) %&gt;% \n    # add error term\n    add_ranef(e_si_c = sigma_c) %&gt;% \n    # add response values\n    mutate(\n      # add together fixed and random effects for each effect\n      B_0 = beta_0_c + S_0_c + I_0_c,\n      B_p = beta_p_c + S_p_c,\n      # calculate dv by adding each effect term multiplied by the relevant\n      # effect-coded factors\n      dv_c = B_0 + (B_p * X_p) + e_si_c\n    )\n  \n  # truncuate negative numbers?\n  if (options$truncNegNums) {\n    dat_c &lt;- dat_c %&gt;%\n      mutate(dv_c = ifelse(dv_c &lt; 0, 0, dv_c))\n  }\n  \n  # run a linear mixed effects model and check summary\n  mod_c &lt;- lmer(\n    dv_c ~ polOri + (1 + polOri | subj) + (1 | item),\n    data = dat_c\n  )\n  mod_c.sum &lt;- summary(mod_c)\n  \n  # check groups\n  tab_groups &lt;- mod_c.sum$ngrps %&gt;%\n    as_tibble(rownames = \"Random.Factor\") %&gt;%\n    mutate(parameters = c(n_subj, n_item))\n\n  # check random effects\n  tab_ranef &lt;- mod_c.sum$varcor %&gt;%\n    as_tibble() %&gt;%\n    select(Groups = grp, Name1 = var1, Name2 = var2, \"Std.Dev.\" = sdcor) %&gt;%\n    mutate(parameters = c(subj_0_c, subj_p_c, subj_rho_c, item_0_c, sigma_c))\n  \n  # check fixed effects\n  tab_fixef &lt;- mod_c.sum$coefficients %&gt;% \n    as_tibble(rownames = \"Effect\") %&gt;% \n    select(Effect, Estimate) %&gt;% \n    mutate(parameters = c(beta_0_c, beta_p_c))\n\n  # combine these checks in one list\n  list_checks &lt;- list(\n    groups = tab_groups,\n    random_effects = tab_ranef,\n    fixed_effects = tab_fixef\n  )\n  \n  # create plot to check simulation\n  plot_dat_c &lt;- dat_c %&gt;% \n    ggplot(aes(x = polOri, y = dv_c, color = polOri)) +\n    geom_hline(yintercept = beta_0_c) +\n    geom_violin(alpha = .5) +\n    stat_summary(\n      fun = mean,\n      fun.min = \\(x){mean(x) - sd(x)},\n      fun.max = \\(x){mean(x) + sd(x)}\n    ) +\n    scale_y_continuous(breaks = scales::pretty_breaks(n = 10)) +\n    scale_color_manual(values = c(\"red\", \"dodgerblue\")) +\n    theme_bw()\n    \n    \n    \n    return(list(\n      data = dat_c,\n      model_lmer = mod_c,\n      checks = list_checks,\n      plot = plot_dat_c\n    ))\n}\n\n\nLet’s have a look at the simulated data. First, let’s have a look at Figure 1, displaying the distribution (violin plot) and mean ± 1 standard deviation (dot ± error bars) for republicans and democrats. The true population mean is indicated by the horizontal line.\n\n\nShow the code\nout_fun_sim_dwellTimeCarbon &lt;- FUN_sim_dwellTimeCarbon(\n  n_subj       =       100, # number of subjects\n  n_subj_prop  = c(.5, .5), # number of republican and democrat subjects\n  n_item       =        25, # number of items\n  beta_0_c     =       3.5, # intercept (grand mean) for dwell time (dt) carbon\n  beta_p_c     =       .20, # effect of political orientation on dt carbon\n  subj_0_c     =       .25, # by-subject random intercept sd for dt carbon\n  subj_p_c     =       .20, # by-subject random slope sd for dt carbon\n  subj_rho_c   =       .00, # by-subject random effects correlations for dt carbon\n  item_0_c     =       .04, # by-item random intercept sd\n  sigma_c      =        .9, # residual (error) sd\n  \n  options = list(\n    truncNegNums = FALSE    # set negative numbers to zero (no negative dwell times)\n  )\n)\n\nout_fun_sim_dwellTimeCarbon$plot\n\n\n\n\n\n\n\n\nFigure 1: Distribution of dwell times on carbon outcomes (dv_c).\n\n\n\n\n\nNext, we compare the estimated values and population (i.e., “true”) parameters:\n\n\nShow the code\nout_fun_sim_dwellTimeCarbon$checks$groups %&gt;% \n  knitr::kable()\n\n\n\n\n\nRandom.Factor\nvalue\nparameters\n\n\n\n\nsubj\n100\n100\n\n\nitem\n25\n25\n\n\n\n\n\n\n\nShow the code\nout_fun_sim_dwellTimeCarbon$checks$random_effects %&gt;% \n  knitr::kable()\n\n\n\n\n\nGroups\nName1\nName2\nStd.Dev.\nparameters\n\n\n\n\nsubj\n(Intercept)\nNA\n0.0000000\n0.25\n\n\nsubj\npolOri.dem-rep\nNA\n0.5537873\n0.20\n\n\nsubj\n(Intercept)\npolOri.dem-rep\nNaN\n0.00\n\n\nitem\n(Intercept)\nNA\n0.0123748\n0.04\n\n\nResidual\nNA\nNA\n0.8869892\n0.90\n\n\n\n\n\n\n\nShow the code\nout_fun_sim_dwellTimeCarbon$checks$fixed_effects %&gt;% \n  knitr::kable()\n\n\n\n\n\nEffect\nEstimate\nparameters\n\n\n\n\n(Intercept)\n3.5095716\n3.5\n\n\npolOri.dem-rep\n0.1315737\n0.2\n\n\n\n\n\n\n\n2.1.2 Simulate Dwell Time on Bonus Information\nNext, we need to simulate data representing how much time participants spend on gathering information regarding bonus outcomes. The choice for the default parameter values is justified as above. Most important difference: beta_p_b is negative as we expect that compared to republicans, democrats spend less time on gathering bonus information. Specifically, we reason that republicans spend the time they “save” in looking at carbon information (reduced dwell time on carbon information compared to democrats) on looking at bonus information, i.e., beta_p_b = -beta_p_c = -0.20.\n\n\nShow the code\n# set up the custom data simulation function for dwell time bonus\nFUN_sim_dwellTimeBonus &lt;- function(\n  n_subj       =       100, # number of subjects\n  n_subj_prop  = c(.5, .5), # number of republican and democrat subjects\n  n_item       =        25, # number of items\n  beta_0_b     =       3.5, # intercept (grand mean) for dwell time (dt) bonus\n  beta_p_b     =      -.20, # effect of political orientation on dt bonus\n  subj_0_b     =       .25, # by-subject random intercept sd for dt bonus\n  subj_p_b     =       .20, # by-subject random slope sd for dt bonus\n  subj_rho_b   =       .00, # by-subject random effects correlations for dt bonus\n  item_0_b     =       .04, # by-item random intercept sd for dwell time bonus\n  sigma_b      =        .9, # residual (error) sd for dwell time bonus\n  \n  options = list(\n    truncNegNums = FALSE    # set negative numbers to zero (no negative dwell times)\n  )\n) {\n  \n  # simulate data for dwell time on carbon information\n  dat_b &lt;- \n    # add random factor subject\n    add_random(subj = n_subj) %&gt;% \n    # add random factor item\n    add_random(item = n_item) %&gt;% \n    # add between-subject factor political orientation (with anova contrast)\n    # note: see comment on .shuffle = FALSE in FUN_sim_dwellTimeCarbon\n    add_between(\"subj\", polOri = c(\"rep\", \"dem\"), .prob = n_subj_prop*n_subj, .shuffle = FALSE) %&gt;% \n    add_contrast(\"polOri\", colnames = \"X_p\", contrast = \"anova\") %&gt;% \n    # add by-subject random intercept and slope\n    add_ranef(\"subj\", S_0_b = subj_0_b, S_p_b = subj_p_b, .cors = subj_rho_b) %&gt;% \n    # add by-item random intercept\n    add_ranef(\"item\", I_0_b = item_0_b) %&gt;% \n    # add error term\n    add_ranef(e_si_b = sigma_b) %&gt;% \n    # add response values\n    mutate(\n      # add together fixed and random effects for each effect\n      B_0 = beta_0_b + S_0_b + I_0_b,\n      B_p = beta_p_b + S_p_b,\n      # calculate dv by adding each effect term multiplied by the relevant\n      # effect-coded factors\n      dv_b = B_0 + (B_p * X_p) + e_si_b\n    )\n  \n  # truncuate negative numbers?\n  if (options$truncNegNums) {\n    dat_b &lt;- dat_b %&gt;%\n      mutate(dv_b = ifelse(dv_b &lt; 0, 0, dv_b))\n  }\n  \n  # run a linear mixed effects model and check summary\n  mod_b &lt;- lmer(\n    dv_b ~ polOri + (1 + polOri | subj) + (1 | item),\n    data = dat_b\n  )\n  mod_b.sum &lt;- summary(mod_b)\n  \n  # check groups\n  tab_groups &lt;- mod_b.sum$ngrps %&gt;%\n    as_tibble(rownames = \"Random.Factor\") %&gt;%\n    mutate(parameters = c(n_subj, n_item))\n\n  # check random effects\n  tab_ranef &lt;- mod_b.sum$varcor %&gt;%\n    as_tibble() %&gt;%\n    select(Groups = grp, Name1 = var1, Name2 = var2, \"Std.Dev.\" = sdcor) %&gt;%\n    mutate(parameters = c(subj_0_b, subj_p_b, subj_rho_b, item_0_b, sigma_b))\n  \n  # check fixed effects\n  tab_fixef &lt;- mod_b.sum$coefficients %&gt;% \n    as_tibble(rownames = \"Effect\") %&gt;% \n    select(Effect, Estimate) %&gt;% \n    mutate(parameters = c(beta_0_b, beta_p_b))\n\n  # combine these checks in one list\n  list_checks &lt;- list(\n    groups = tab_groups,\n    random_effects = tab_ranef,\n    fixed_effects = tab_fixef\n  )\n  \n  # create plot to check simulation\n  plot_dat_b &lt;- dat_b %&gt;% \n    ggplot(aes(x = polOri, y = dv_b, color = polOri)) +\n    geom_hline(yintercept = beta_0_b) +\n    geom_violin(alpha = .5) +\n    stat_summary(\n      fun = mean,\n      fun.min = \\(x){mean(x) - sd(x)},\n      fun.max = \\(x){mean(x) + sd(x)}\n    ) +\n    scale_y_continuous(breaks = scales::pretty_breaks(n = 10)) +\n    scale_color_manual(values = c(\"red\", \"dodgerblue\")) +\n    theme_bw()\n    \n    \n    \n    return(list(\n      data = dat_b,\n      model_lmer = mod_b,\n      checks = list_checks,\n      plot = plot_dat_b\n    ))\n}\n\n\nAgain, let’s have a look at the simulated data. First, let’s have a look at Figure 2, displaying the distribution (violin plot) and mean ± 1 standard deviation (dot ± error bars) for republicans and democrats. The true population mean is indicated by the horizontal line.\n\n\nShow the code\nout_fun_sim_dwellTimeBonus &lt;- FUN_sim_dwellTimeBonus(\n  n_subj       =       100, # number of subjects\n  n_subj_prop  = c(.5, .5), # number of republican and democrat subjects\n  n_item       =        25, # number of items\n  beta_0_b     =       3.5, # intercept (grand mean) for dwell time (dt) bonus\n  beta_p_b     =      -.20, # effect of political orientation on dt bonus\n  subj_0_b     =       .25, # by-subject random intercept sd for dt bonus\n  subj_p_b     =       .20, # by-subject random slope sd for dt bonus\n  subj_rho_b   =       .00, # by-subject random effects correlations for dt bonus\n  item_0_b     =       .04, # by-item random intercept sd for dwell time bonus\n  sigma_b      =        .9, # residual (error) sd for dwell time bonus\n  \n  options = list(\n    truncNegNums = FALSE    # set negative numbers to zero (no negative dwell times)\n  )\n)\n\nout_fun_sim_dwellTimeBonus$plot\n\n\n\n\n\n\n\n\nFigure 2: Distribution of dwell times on bonus outcomes.\n\n\n\n\n\nNext, we compare the estimated values and population (i.e., “true”) parameters:\n\n\nShow the code\nout_fun_sim_dwellTimeBonus$checks$groups %&gt;% \n  knitr::kable()\n\n\n\n\n\nRandom.Factor\nvalue\nparameters\n\n\n\n\nsubj\n100\n100\n\n\nitem\n25\n25\n\n\n\n\n\n\n\nShow the code\nout_fun_sim_dwellTimeBonus$checks$random_effects %&gt;% \n  knitr::kable()\n\n\n\n\n\nGroups\nName1\nName2\nStd.Dev.\nparameters\n\n\n\n\nsubj\n(Intercept)\nNA\n0.0474069\n0.25\n\n\nsubj\npolOri.dem-rep\nNA\n0.5096282\n0.20\n\n\nsubj\n(Intercept)\npolOri.dem-rep\n0.3891594\n0.00\n\n\nitem\n(Intercept)\nNA\n0.0701760\n0.04\n\n\nResidual\nNA\nNA\n0.9025816\n0.90\n\n\n\n\n\n\n\nShow the code\nout_fun_sim_dwellTimeBonus$checks$fixed_effects %&gt;% \n  knitr::kable()\n\n\n\n\n\nEffect\nEstimate\nparameters\n\n\n\n\n(Intercept)\n3.5305870\n3.5\n\n\npolOri.dem-rep\n-0.2866421\n-0.2\n\n\n\n\n\nFinally, we inspect the lmer model results that modelled the data exactly as the population data was set up:\ndv ~ polOri + (1 + polOri | subj) + (1 | item)\nNote that in the following table random effects represent variances (not standard deviations), except for the error term.\n\n\nShow the code\ntab_model(out_fun_sim_dwellTimeCarbon$model_lmer, out_fun_sim_dwellTimeBonus$model_lmer,\n          show.ci = FALSE, digits = 4, digits.re = 4)\n\n\n\n\n \ndv c\ndv b\n\n\nPredictors\nEstimates\np\nEstimates\np\n\n\n(Intercept)\n3.5096\n&lt;0.001\n3.5306\n&lt;0.001\n\n\npolOri dem-rep\n0.1316\n0.046\n-0.2866\n&lt;0.001\n\n\nRandom Effects\n\n\n\nσ2\n0.7867\n0.8147\n\n\n\nτ00\n0.0000 subj\n0.0022 subj\n\n\n\n0.0002 item\n0.0049 item\n\n\nτ11\n0.3067 subj.polOri.dem-rep\n0.2597 subj.polOri.dem-rep\n\n\nρ01\n \n0.3892 subj\n\n\nICC\n \n0.0813\n\n\nN\n100 subj\n100 subj\n\n\n\n25 item\n25 item\n\nObservations\n2500\n2500\n\n\nMarginal R2 / Conditional R2\n0.005 / NA\n0.023 / 0.102\n\n\n\n\n\n\n\n\n2.1.3 Simulate \\(\\Delta Duration\\)\nWe are now ready to combine the two functions above to simulate \\(\\Delta Duration\\) data.\n\n\nShow the code\n# set up the custom data simulation function for delta duration\nFUN_sim_dwellTimeDeltaDuration &lt;- function(\n  n_subj       =       100, # number of subjects\n  n_subj_prop  = c(.5, .5), # number of republican and democrat subjects\n  n_item       =        25, # number of items\n  beta_0_c     =       3.5, # intercept (grand mean) for dwell time (dt) carbon\n  beta_p_c     =       .20, # effect of political orientation on dt carbon\n  beta_0_b     =       3.5, # intercept (grand mean) for dwell time (dt) bonus\n  beta_p_b     =      -.20, # effect of political orientation on dt bonus\n  subj_0_c     =       .25, # by-subject random intercept sd for dt carbon\n  subj_p_c     =       .20, # by-subject random slope sd for dt carbon\n  subj_rho_c   =       .00, # by-subject random effects correlations for dt carbon\n  subj_0_b     =       .25, # by-subject random intercept sd for dt bonus\n  subj_p_b     =       .20, # by-subject random slope sd for dt bonus\n  subj_rho_b   =       .00, # by-subject random effects correlations for dt bonus\n  item_0_c     =       .04, # by-item random intercept sd for carbon\n  item_0_b     =       .04, # by-item random intercept sd for bonus\n  sigma_c      =        .9, # residual (error) sd for carbon\n  sigma_b      =        .9, # residual (error) sd for bonus\n  \n  options = list(\n    truncNegNums = TRUE     # set negative numbers to zero (no negative dwell times)\n  )\n) {\n  \n  # simulate data for dwell time carbon\n  out_fun_sim_dwellTimeCarbon &lt;- FUN_sim_dwellTimeCarbon(\n    n = n_subj,\n    n_subj_prop = n_subj_prop,\n    n_item = n_item,\n    beta_0_c = beta_0_c,\n    beta_p_c = beta_p_c,\n    subj_0_c = subj_0_c,\n    subj_p_c = subj_p_c,\n    subj_rho_c = subj_rho_c,\n    item_0_c = item_0_c,\n    sigma_c = sigma_c,\n    options = list(truncNegNums = TRUE)\n  )\n  \n  # simulate data for dwell time bonus\n  out_fun_sim_dwellTimeBonus &lt;- FUN_sim_dwellTimeBonus(\n    n = n_subj,\n    n_subj_prop = n_subj_prop,\n    n_item = n_item,\n    beta_0_b = beta_0_b,\n    beta_p_b = beta_p_b,\n    subj_0_b = subj_0_b,\n    subj_p_b = subj_p_b,\n    subj_rho_b = subj_rho_b,\n    item_0_b = item_0_b,\n    sigma_b = sigma_b,\n    options = list(truncNegNums = TRUE)\n  )\n  \n  # join data sets and create variable delta duration\n  dat &lt;- left_join(\n    x = out_fun_sim_dwellTimeCarbon$data %&gt;% select(-c(B_0, B_p)),\n    y = out_fun_sim_dwellTimeBonus$data %&gt;% select(-c(B_0, B_p)),\n    by = c(\"subj\", \"item\", \"polOri\", \"X_p\")\n  ) %&gt;% \n    # create index delta duration\n    mutate(dv_index = (dv_c - dv_b) / (dv_c + dv_b)) %&gt;% \n    # reorder variables so that dv_index is more at the beginning\n    select(1:4, dv_index, dv_c, dv_b, everything())\n  \n  # run a linear mixed effects model and check summary\n  mod &lt;- lmer(\n    dv_index ~ polOri + (1 + polOri | subj) + (1 | item),\n    data = dat\n  )\n  mod.sum &lt;- summary(mod)\n  \n  # check groups\n  tab_groups &lt;- mod.sum$ngrps %&gt;%\n    as_tibble(rownames = \"Random.Factor\") %&gt;% \n    mutate(parameters = c(n_subj, n_item))\n\n  # check random effects\n  tab_ranef &lt;- mod.sum$varcor %&gt;%\n    as_tibble() %&gt;%\n    select(Groups = grp, Name1 = var1, Name2 = var2, \"Std.Dev.\" = sdcor)\n  \n  # check fixed effects\n  tab_fixef &lt;- mod.sum$coefficients %&gt;% \n    as_tibble(rownames = \"Effect\") %&gt;% \n    select(Effect, Estimate) %&gt;% \n    mutate(parameters = c(\n      NA,\n      ( (beta_0_c + beta_p_c) - (beta_0_b + beta_p_b) ) / (beta_0_c + beta_p_c + beta_0_b + beta_p_b)\n    ))\n\n  # combine these checks in one list\n  list_checks &lt;- list(\n    groups = tab_groups,\n    random_effects = tab_ranef,\n    fixed_effects = tab_fixef\n  )\n  \n  # create plots\n  plot_dvs &lt;- dat %&gt;% \n    pivot_longer(cols = c(\"dv_c\", \"dv_b\"), names_to = \"dv\") %&gt;%\n    mutate(dv = factor(dv, levels = c(\"dv_c\", \"dv_b\"))) %&gt;% \n    ggplot(aes(x = polOri, y = value, color = polOri)) +\n    geom_violin(alpha = .5, show.legend = FALSE) +\n    stat_summary(\n      fun = mean,\n      fun.min = \\(x){mean(x) - sd(x)},\n      fun.max = \\(x){mean(x) + sd(x)},\n      show.legend = FALSE\n    ) +\n    scale_y_continuous(breaks = scales::pretty_breaks(n = 10)) +\n    scale_color_manual(values = c(\"red\", \"dodgerblue\")) +\n    theme_bw() +\n    facet_wrap(~ dv)\n  \n  plot_dv_index &lt;- dat %&gt;% \n    ggplot(aes(x = polOri, y = dv_index, color = polOri)) +\n    geom_violin(alpha = .5, show.legend = FALSE) +\n    stat_summary(\n      fun = mean,\n      fun.min = \\(x){mean(x) - sd(x)},\n      fun.max = \\(x){mean(x) + sd(x)},\n      show.legend = FALSE\n    ) +\n    scale_y_continuous(breaks = scales::pretty_breaks(n = 10)) +\n    coord_cartesian(ylim = c(-1, 1)) +\n    scale_color_manual(values = c(\"red\", \"dodgerblue\")) +\n    theme_bw()\n  \n  return(list(\n    data = dat,\n    model_lmer = mod,\n    checks = list_checks,\n    plots = list(dvs = plot_dvs,\n                 dv_index = plot_dv_index),\n    indFunOut = list(carbon = out_fun_sim_dwellTimeCarbon,\n                     bonus = out_fun_sim_dwellTimeBonus)\n  ))\n  \n}\n\n\nWe check the result of one particular simulation as an example by inspecting Figure 3.\n\n\nShow the code\nout_fun_sim_dwellTimeDeltaDuration &lt;- FUN_sim_dwellTimeDeltaDuration(\n  n_subj       =       100, # number of subjects\n  n_subj_prop  = c(.5, .5), # number of republican and democrat subjects\n  n_item       =        25, # number of items\n  beta_0_c     =       3.5, # intercept (grand mean) for dwell time (dt) carbon\n  beta_p_c     =       .20, # effect of political orientation on dt carbon\n  beta_0_b     =       3.5, # intercept (grand mean) for dwell time (dt) bonus\n  beta_p_b     =      -.20, # effect of political orientation on dt bonus\n  subj_0_c     =       .25, # by-subject random intercept sd for dt carbon\n  subj_p_c     =       .20, # by-subject random slope sd for dt carbon\n  subj_rho_c   =       .00, # by-subject random effects correlations for dt carbon\n  subj_0_b     =       .25, # by-subject random intercept sd for dt bonus\n  subj_p_b     =       .20, # by-subject random slope sd for dt bonus\n  subj_rho_b   =       .00, # by-subject random effects correlations for dt bonus\n  item_0_c     =       .04, # by-item random intercept sd for carbon\n  item_0_b     =       .04, # by-item random intercept sd for bonus\n  sigma_c      =        .9, # residual (error) sd for carbon\n  sigma_b      =        .9, # residual (error) sd for bonus\n  \n  options = list(\n    truncNegNums = TRUE     # set negative numbers to zero (no negative dwell times)\n  )\n)\n\n\n\n\nShow the code\nggarrange(\n  out_fun_sim_dwellTimeDeltaDuration$plots$dvs +\n    labs(y = \"Dwell Time (in s)\"),\n  out_fun_sim_dwellTimeDeltaDuration$plots$dv_index +\n    labs(y = TeX(r'($\\Delta Duration$)')),\n  labels = c(\"A\", \"B\"),\n  ncol = 2, widths = c(2, 1)\n)\n\n\n\n\n\n\n\n\nFigure 3: Results of one simulation of \\(\\Delta Duration\\) data. (A) simulated dwell times on carbon information (dv_c) and on bonus information (dv_b). (B) Resulting distributions of \\(\\Delta Duration\\) indices.\n\n\n\n\n\nWe predict \\(\\Delta Duration\\) by the following formula:\ndv_index ~ polOri + (1 + polOri | subj) + (1 | item)\nThe results of the lmer model are:\n\n\nShow the code\ntab_model(out_fun_sim_dwellTimeDeltaDuration$model_lmer,\n          show.ci = FALSE, digits = 4, digits.re = 4)\n\n\n\n\n \ndv index\n\n\nPredictors\nEstimates\np\n\n\n(Intercept)\n-0.0356\n&lt;0.001\n\n\npolOri [dem]\n0.0565\n&lt;0.001\n\n\nRandom Effects\n\n\n\nσ2\n0.0366\n\n\n\nτ00 subj\n0.0029\n\n\nτ00 item\n0.0000\n\n\nτ11 subj.polOridem\n0.0019\n\n\nρ01 subj\n-0.0992\n\n\nICC\n0.0909\n\n\nN subj\n100\n\n\nN item\n25\n\nObservations\n2500\n\n\nMarginal R2 / Conditional R2\n0.019 / 0.109"
  },
  {
    "objectID": "scripts/EcoTRACEPowerAnalysis_report.html#create-multiple-simulations",
    "href": "scripts/EcoTRACEPowerAnalysis_report.html#create-multiple-simulations",
    "title": "EcoTRACE Power Simulations",
    "section": "2.2 Create Multiple Simulations",
    "text": "2.2 Create Multiple Simulations\nIn a next step, we repeat the simulation 1000 times to get more robust estimates of fixed and random effects we should expect based on the parameters we provided.\n\n\nShow the code\n# how many times should the simulations be run?\nreps &lt;- 1000\n\n# define arguemnts\nargs &lt;- list(\n  n_subj       =       100, # number of subjects\n  n_subj_prop  = c(.5, .5), # number of republican and democrat subjects\n  n_item       =        25, # number of items\n  beta_0_c     =       3.5, # intercept (grand mean) for dwell time (dt) carbon\n  beta_p_c     =       .20, # effect of political orientation on dt carbon\n  beta_0_b     =       3.5, # intercept (grand mean) for dwell time (dt) bonus\n  beta_p_b     =      -.20, # effect of political orientation on dt bonus\n  subj_0_c     =       .25, # by-subject random intercept sd for dt carbon\n  subj_p_c     =       .20, # by-subject random slope sd for dt carbon\n  subj_rho_c   =       .00, # by-subject random effects correlations for dt carbon\n  subj_0_b     =       .25, # by-subject random intercept sd for dt bonus\n  subj_p_b     =       .20, # by-subject random slope sd for dt bonus\n  subj_rho_b   =       .00, # by-subject random effects correlations for dt bonus\n  item_0_c     =       .04, # by-item random intercept sd for carbon\n  item_0_b     =       .04, # by-item random intercept sd for bonus\n  sigma_c      =        .9, # residual (error) sd for carbon\n  sigma_b      =        .9, # residual (error) sd for bonus\n  \n  options = list(\n    truncNegNums = TRUE     # set negative numbers to zero (no negative dwell times)\n  )\n)\n\n# define function to extract estimated fixed and random effects\ngetFixedAndRandEff_sim_dwellTimeDeltaDuration &lt;- function(rep) {\n  \n  # do the simulation once\n  sim &lt;- do.call(FUN_sim_dwellTimeDeltaDuration, args)\n  \n  # put the fixed effects into a data table\n  fixed_effects &lt;- broom.mixed::tidy(sim$model_lmer, \"fixed\") %&gt;% \n    # add a column for each repetition\n    mutate(rep = rep)\n  \n  # put the random effects into a data table\n  random_effects &lt;- broom.mixed::tidy(sim$model_lmer, \"ran_pars\") %&gt;% \n    # add a column for each repetition\n    mutate(rep = rep)\n  \n  return(list(\n    fix = fixed_effects,\n    rand = random_effects\n  ))\n}\n\n\n\n\nShow the code\n# do the repetitions and save results in a list\n# time this function with tictoc\ntic()\nrepetitions &lt;- map(\n  .x = 1:reps,\n  .f = getFixedAndRandEff_sim_dwellTimeDeltaDuration\n)\ntoc()\n\n# fixed effects: combine results into one data frame\nfixed_multiSim_dwellTimeDeltaDuration &lt;- map_dfr(\n  .x = 1:reps,\n  .f = ~repetitions[[.x]]$fix\n)\n\n# random effects: combine results into one data frame\nrandom_multiSim_dwellTimeDeltaDuration &lt;- map_dfr(\n  .x = 1:reps,\n  .f = ~repetitions[[.x]]$rand\n) %&gt;% \n  mutate(group_term = str_c(group, term, sep = \"_\"))\n\n# save simulation results in a data frame\ntime &lt;- format(Sys.time(), \"%Y%m%d_%H%M\")\nfileName &lt;- paste0(\"SimCustom_defaultValues\", \"_\", time, \".RData\")\n\nsave(\n  fixed_multiSim_dwellTimeDeltaDuration,\n  random_multiSim_dwellTimeDeltaDuration,\n  file = file.path(\"../data/powerAnalyses\", fileName)\n)\n\n\n\n\nShow the code\n# load stored simulations (change file name if necessary)\nfileName &lt;- \"SimCustom_defaultValues_20240304_0823.RData\"\nload(file.path(\"../data/powerAnalyses\", fileName))\n\n\nLet’s have a look at the distribution of fixed effects in these multiple simulations. These are shown in Figure 4.6\n\n\nShow the code\n# create data set of means of distributions\nmeans_fixed &lt;- fixed_multiSim_dwellTimeDeltaDuration %&gt;% \n  group_by(term) %&gt;% \n  summarise(estimate.mean = round(mean(estimate), 4))\n\n# plot distributions\nfixed_multiSim_dwellTimeDeltaDuration %&gt;% \n  ggplot(aes(x = estimate)) +\n  geom_histogram(\n    color = \"black\",\n    fill = \"grey80\",\n    alpha = .5,\n    show.legend = FALSE\n  ) +\n  geom_vline(\n    data = means_fixed,\n    mapping = aes(xintercept = estimate.mean),\n    linetype = \"dashed\",\n    linewidth = 1\n  ) +\n  geom_label(\n    data = means_fixed,\n    mapping = aes(x = estimate.mean, label = estimate.mean),\n    y = Inf,\n    vjust = 1.5\n  ) +\n  # geom_label(aes(x = meanEff, y = 100, label = meanEff)) +\n  facet_wrap(~term, scales = \"fixed\") +\n  theme_bw()\n\n\n\n\n\n\n\n\nFigure 4: Distribution of estimates of fixed effects. Dashed lines indicate distribution means.\n\n\n\n\n\nLet’s calculate the power of our analysis to find these effects.\n\n\nShow the code\n# calculate power\nfixed_multiSim_dwellTimeDeltaDuration %&gt;% \n  group_by(term) %&gt;% \n  summarise(\n    power = mean(p.value &lt; 0.05)\n  ) %&gt;% \n  knitr::kable(digits = 3)\n\n\n\n\n\nterm\npower\n\n\n\n\n(Intercept)\n0.843\n\n\npolOridem\n0.995\n\n\n\n\n\nFinally, let’s have a look at the distribution of random effects in these multiple simulations. These are shown in Figure 5.\n\n\nShow the code\n# create data set of means of distributions\nmeans_random &lt;- random_multiSim_dwellTimeDeltaDuration %&gt;% \n  group_by(group_term) %&gt;% \n  summarise(estimate.mean = round(mean(estimate, na.rm = TRUE), 4))\n\n# plot distributions\nrandom_multiSim_dwellTimeDeltaDuration %&gt;% \n  ggplot(aes(x = estimate)) +\n  geom_histogram(\n    color = \"black\",\n    fill = \"grey80\",\n    alpha = .5,\n    show.legend = FALSE\n  ) +\n  geom_vline(\n    data = means_random,\n    mapping = aes(xintercept = estimate.mean),\n    linetype = \"dashed\",\n    linewidth = 1\n  ) +\n  geom_label(\n    data = means_random,\n    mapping = aes(x = estimate.mean, label = estimate.mean),\n    y = Inf,\n    vjust = 1.5\n  ) +\n  facet_wrap(~group_term, scales = \"free\") +\n  theme_bw()\n\n\n\n\n\n\n\n\nFigure 5: Distribution of estimates of random effects. Dashed lines indicate distribution means.\n\n\n\n\n\nThese estimated effects, especially the random ones, can now be helpful in order to do power simulations using the simr package."
  },
  {
    "objectID": "scripts/EcoTRACEPowerAnalysis_report.html#simulations-with-simr",
    "href": "scripts/EcoTRACEPowerAnalysis_report.html#simulations-with-simr",
    "title": "EcoTRACE Power Simulations",
    "section": "3.1 Simulations with simr",
    "text": "3.1 Simulations with simr\n\n3.1.1 Define Parameters for simr\nHere, we leverage the package simr to do multiple power simulations. We need to define a design table data frame and the expected fixed and random effects parameters. We do not need to simulate the dependent variable. This will be done by simr::makeLmer later on.\n\n\nShow the code\n# define number of subjects\nn_subject &lt;- 100\n# define number of trials\nn_item &lt;- 25\n\n# create basic data frame\ndataSimr &lt;- add_random(subj = n_subject, item = n_item) %&gt;% \n  # this step is needed for simr to work properly\n  mutate(subj = factor(subj),\n         item = factor(item)) %&gt;% \n  # add between-subject factor political orientation (republican vs. democrat)\n  add_between(\"subj\", polOri = c(\"rep\", \"dem\")) %&gt;% \n  # add anova style contrasts (intercept = grand mean)\n  add_contrast(\"polOri\", contrast = \"anova\")\n\n# create temporary tibble to get number of republicans and democrats\ntmp &lt;- dataSimr %&gt;% \n    distinct(subj, polOri) %&gt;% \n    count(polOri)\n\n# create tibble to display design variables\ntibble(\n  parameter = c(\"Number of Subjects\",\n                \"Number of Items\",\n                \"Number of Republicans\",\n                \"Number of Democrats\"),\n  value = c(\n    length(unique(out_fun_sim_dwellTimeDeltaDuration$data$subj)),\n    length(unique(out_fun_sim_dwellTimeDeltaDuration$data$item)),\n    tmp$n[1],\n    tmp$n[2]\n  )\n) %&gt;% \n  knitr::kable()\n\n\n\n\nTable 1: Parameters for design data table for simr functions.\n\n\n\n\n\n\nparameter\nvalue\n\n\n\n\nNumber of Subjects\n100\n\n\nNumber of Items\n25\n\n\nNumber of Republicans\n50\n\n\nNumber of Democrats\n50\n\n\n\n\n\n\n\n\n\n\nShow the code\ndataSimr %&gt;% \n  DT::datatable()\n\n\n\n\nTable 2: Design data table for simr functions.\n\n\n\n\n\n\n\n\n\n\nAs before, we will model \\(\\Delta Duration\\) as follows:\n\\(\\Delta Duration \\sim polOri + (1 + polOri | subj) + (1 | item)\\)\nFor the fixed and random effects, we will use the mean of the estimated effects in our previous simulations (see Figure 4 and Figure 5).7\n\n\nShow the code\n# see https://github.com/pitakakariki/simr/issues/132\n# \nmodel &lt;- lmer(dv_index ~ polOri + (1 + polOri | subj) + (1 | item),\n              data = out_fun_sim_dwellTimeDeltaDuration$data)\n\n# We need the following values for the following matrix:\n# \n# matrix(A,B,\n#        C,D)\n# \n# A = by-subject intercept variance. We can either get this by squaring the \n#     Std.Dev = 0.037993 or by reading it of if we loaded lmerTest\n# B = covariance of by-subject intercept and by-subject slope. We get this by\n#     multiplying the by-subject intercept Std.Dev, by-subject slope Std.Dev,\n#     and Corr.\n# C = by-subject slope variance. We can either get this by squaring the\n#     Std.Dev = 0.009537 or by reading it of if we loaded lmerTest.\n# D = B\n\n# first, we inspect the results of our model to identify these values:\nsummary(model)\n\n# then we define our VarCor matrix as described\nmyMatrix &lt;- matrix(c(\n  0.037993^2,               0.037993*0.009537*0.85,\n  0.037993*0.009537*0.85,   0.009537^2\n), 2)\n\n# then we define the list as we need it for simr\n# note that as the second element, we provide Std.Dev squared (i.e., variance)\n# for the by-item intercept (which has no random slope)\nV &lt;- list(\n  myMatrix,\n  0\n)\n\n# finally, we call makeLmer with our values defined and check weather the\n# resulting model summary is as expected.\nmakeLmer(\n  dv_index ~ polOri + (1 + polOri | subj) + (1 | item),\n  fixef=c(-0.0293, 0.0592),\n  VarCorr = V,\n  sigma = 0.188492,\n  data = out_fun_sim_dwellTimeDeltaDuration$data\n)\n\n\n\n\nShow the code\n# define fixed effects\nfixef &lt;- means_fixed$estimate.mean\n\n# extract and calculate variables for VarCorr[[1]] covariance matrix. e designates\n# elements of the matrix:\n# matrix(e1, e2\n#        e3, e4)\n\n# e1: by-subject intercept variance\ne1 &lt;- means_random %&gt;% \n  filter(group_term == \"subj_sd__(Intercept)\") %&gt;% \n  pull(estimate.mean) %&gt;% \n  # square sd to get variance\n  .^2\n\n# e4: by-subject slope variance\ne4 &lt;- means_random %&gt;% \n  filter(group_term == \"subj_sd__polOridem\") %&gt;% \n  pull(estimate.mean) %&gt;% \n  # square sd to get variance\n  .^2\n\n# e2=e3: covariance of by-subject intercept and by-subject slope\ntmp.corr &lt;- means_random %&gt;% \n  filter(group_term == \"subj_cor__(Intercept).polOridem\") %&gt;% \n  pull(estimate.mean)\n# covariance = corr * sd * sd\ne2 &lt;- tmp.corr*sqrt(e1)*sqrt(e4)\ne3 &lt;- e2\n\n# create matrix for VarCorr[[1]]\nV &lt;- matrix(c(\n  e1, e2,\n  e3, e4\n), nrow = 2)\n\n# extract by-item intercept variance\ne5 &lt;- means_random %&gt;% \n  filter(group_term == \"item_sd__(Intercept)\") %&gt;% \n  pull(estimate.mean) %&gt;% \n  .^2\n\n# define VarCorr\nVarCorr &lt;- list(\n  V,\n  e5\n)\n\n# extract residuals (need to be provided as sd!)\nsigma &lt;- means_random %&gt;% \n  filter(group_term == \"Residual_sd__Observation\") %&gt;% \n  pull(estimate.mean)\n\n\nApplying simr::makeLmer, we generated the following model (compare output with values reported in Figure 4 and Figure 5).\n\n\nShow the code\ns0.makeLmer &lt;- makeLmer(\n  y ~ polOri + (1 + polOri | subj) + (1 | item),\n  fixef=fixef,\n  VarCorr = VarCorr,\n  sigma = sigma,\n  data = dataSimr\n)\n\n# inspect results\n# s0.makeLmer\n\n# note that our variance-covariance matrix resulted in slightly different results.\n# for this reaseon, we change the basic model to not include a correaltion between\n# by-subject random intercept and slope\nV_new &lt;- matrix(c(\n  e1, 0,\n  0, e4), nrow = 2)\nVarCorr(s0.makeLmer) &lt;- list(\n  V_new,\n  e5\n)\n\n# inspect the model generated by makeLmer again\ns0.makeLmer\n\n\nLinear mixed model fit by REML ['lmerMod']\nFormula: y ~ polOri + (1 + polOri | subj) + (1 | item)\n   Data: dataSimr\nREML criterion at convergence: -969.6138\nRandom effects:\n Groups   Name           Std.Dev. Corr\n subj     (Intercept)    0.0559       \n          polOri.dem-rep 0.0762   0.00\n item     (Intercept)    0.0074       \n Residual                0.1939       \nNumber of obs: 2500, groups:  subj, 100; item, 25\nFixed Effects:\n   (Intercept)  polOri.dem-rep  \n       -0.0298          0.0595  \n\n\nThe power of this model as calculated by simr using 1000 simulations is output below:\n\n\nShow the code\nn_sims &lt;- 1000\n\n# test whether simulation works in principle\ndoTest(s0.makeLmer, fixed(\"polOri.dem-rep\", \"z\"))\n\n# do the simulation\nout.s0.makeLmer &lt;- powerSim(\n  fit = s0.makeLmer,\n  test = fixed(\"polOri.dem-rep\", \"z\"),\n  nsim = n_sims,\n  progress = FALSE\n)\n\n# save simulation results in a data frame\ntime &lt;- format(Sys.time(), \"%Y%m%d_%H%M\")\nfileName &lt;- paste0(\"out.s0.makeLmer\", \"_\", time, \".RData\")\n\nsave(\n  out.s0.makeLmer,\n  file = file.path(\"../data/powerAnalyses/simr\", fileName)\n)\n\n\n\n\nShow the code\n# load stored simulations (change file name if necessary)\nfileName &lt;- \"out.s0.makeLmer_20240304_0924.RData\"\nload(file.path(\"../data/powerAnalyses/simr\", fileName))\n\n# put out results\nout.s0.makeLmer\n\n\nPower for predictor 'polOri.dem-rep', (95% confidence interval):\n      97.10% (95.86, 98.05)\n\nTest: z-test\n      Effect size for polOri.dem-rep is 0.059\n\nBased on 1000 simulations, (215 warnings, 0 errors)\nalpha = 0.05, nrow = 2500\n\nTime elapsed: 0 h 1 m 24 s\n\n\n\n\n3.1.2 Power Curves\nWe will calculate power curves for different changes in our default parameter values. The following list provides an overview regarding which changes we consider and how the corresponding R objects will be named.\n\npowC.default: power curve for default parameters.\npowC.effectsize: power curves for different effect sizes (10%, 20%, 30%, 40%, and 50% smaller than default effect size. The default effect size is based on the “empirical” simulations (see Figure 4).\npowC.effectsize.analytical: power curves for two effect sizes that are derived from analytical considerations.\npowC.error: power curves for different assumptions regarding noise (error / residual variance) in the data.\npowC.randomSlope: power curves for different assumptions regarding random slope variance of political orientation.\npowC.items: power curves for different numbers of items (trials).\n\n\n3.1.2.1 Default Parameters\nLets inspect a power curve for this basic model for our default parameters in Figure 6.\n\n\nShow the code\n# extend s0.makeLmer to include the max number of subjects\nm.powC.default &lt;- extend(\n  s0.makeLmer,\n  along = \"subj\",\n  n = 1000\n)\n\n# create a power curve data set\npowC.default &lt;- powerCurve(\n  fit = m.powC.default,\n  test = fixed(\"polOri.dem-rep\", method = \"z\"),\n  along = \"subj\",\n  breaks = seq(80, 300, 20),\n  nsim = 1000,\n  progress = FALSE\n)\n# plot(powC.default, power = .95)\n\n# save simulation results in a data frame\ntime &lt;- format(Sys.time(), \"%Y%m%d_%H%M\")\nfileName &lt;- paste0(\"powC.default\", \"_\", time, \".RData\")\n\nsave(\n  powC.default,\n  file = file.path(\"../data/powerAnalyses/simr\", fileName)\n)\n\n\n\n\nShow the code\n# load stored simulations (change file name if necessary)\nfileName &lt;- \"powC.default_20240304_1348.RData\"\nload(file.path(\"../data/powerAnalyses/simr\", fileName))\n\np.powC.default &lt;- summary(powC.default) %&gt;% \n  ggplot(aes(\n    x = nlevels,\n    y = mean,\n    ymin = lower,\n    ymax = upper\n  )) +\n  geom_ribbon(fill = \"grey94\") +\n  geom_errorbar(color = \"grey40\", width = 1.5) +\n  geom_line(color = \"black\") +\n  geom_point() +\n  geom_hline(yintercept = .95, color = \"grey70\", linetype = \"dashed\") +\n  scale_x_continuous(breaks = summary(powC.default)$nlevels) +\n  scale_y_continuous(\n    limits = c(0, 1),\n    breaks = seq(0, 1, .05),\n    labels = paste0(seq(0, 100, 5), \"%\")\n  ) +\n  labs(\n    x = \"Number of Participants\",\n    y = \"Power\"\n  ) +\n  theme_bw() +\n  theme(\n    panel.grid.minor = element_blank(),\n    panel.border = element_blank(),\n    axis.line = element_line(color = \"black\")\n  )\n\np.powC.default\n\n\n\n\n\n\n\n\nFigure 6: Power curve for default parameters.\n\n\n\n\n\n\n\n3.1.2.2 Change Effect Size\n\n3.1.2.2.1 “Empiric” Simulations\nHow does the relationship between subject sample size and power look like for different effect sizes? Figure 7 shows results from simulated power analyses for the default effect size (0.0595) and effect sizes that are 10%, 20%, 30%, 40%, and 50% smaller than this default effect size.\n\n\nShow the code\n# what is the estimated effect size in our simulated data?\nfixef(s0.makeLmer)[\"polOri.dem-rep\"]\n\n# extend s0.makeLmer to include the max number of subjects\nm.powC.effectsize &lt;- extend(\n  s0.makeLmer,\n  along = \"subj\",\n  n = 1000\n)\n\n# we will choose a smaller effect size and save this in a new model\n\n# will choose the new effect size to be 10% smaller than the default\ns1.makeLmer_minus10prcnt &lt;- m.powC.effectsize\nfixef(s1.makeLmer_minus10prcnt)[\"polOri.dem-rep\"] &lt;- (1-.1)*fixef(s0.makeLmer)[\"polOri.dem-rep\"]\n\n# will choose the new effect size to be 20% smaller than the default\ns1.makeLmer_minus20prcnt &lt;- m.powC.effectsize\nfixef(s1.makeLmer_minus20prcnt)[\"polOri.dem-rep\"] &lt;- (1-.2)*fixef(s0.makeLmer)[\"polOri.dem-rep\"]\n\n# will choose the new effect size to be 30% smaller than the default\ns1.makeLmer_minus30prcnt &lt;- m.powC.effectsize\nfixef(s1.makeLmer_minus30prcnt)[\"polOri.dem-rep\"] &lt;- (1-.3)*fixef(s0.makeLmer)[\"polOri.dem-rep\"]\n\n# will choose the new effect size to be 40% smaller than the default\ns1.makeLmer_minus40prcnt &lt;- m.powC.effectsize\nfixef(s1.makeLmer_minus40prcnt)[\"polOri.dem-rep\"] &lt;- (1-.4)*fixef(s0.makeLmer)[\"polOri.dem-rep\"]\n\n# will choose the new effect size to be 50% smaller than the default\ns1.makeLmer_minus50prcnt &lt;- m.powC.effectsize\nfixef(s1.makeLmer_minus50prcnt)[\"polOri.dem-rep\"] &lt;- (1-.5)*fixef(s0.makeLmer)[\"polOri.dem-rep\"]\n\n# test whether simulation will work\ndoTest(s1.makeLmer_minus50prcnt, fixed(\"polOri.dem-rep\", \"z\"))\n\n\n\n\nShow the code\n# how many simulations should be done for each number of subjects?\nn_sims &lt;- 10\n\n# what are the breaks for number of subjects we would like to calculate power for?\nbreaks_subj &lt;- seq(80, 300, 20)\n \n# create power curve data sets\n\npowC.effectsize_minus10prcnt &lt;- powerCurve(\n  fit = s1.makeLmer_minus10prcnt,\n  test = fixed(\"polOri.dem-rep\", method = \"z\"),\n  along = \"subj\",\n  breaks = breaks_subj,\n  nsim = n_sims,\n  progress = FALSE\n)\npowC.effectsize_minus20prcnt &lt;- powerCurve(\n  fit = s1.makeLmer_minus20prcnt,\n  test = fixed(\"polOri.dem-rep\", method = \"z\"),\n  along = \"subj\",\n  breaks = breaks_subj,\n  nsim = n_sims,\n  progress = FALSE\n)\npowC.effectsize_minus30prcnt &lt;- powerCurve(\n  fit = s1.makeLmer_minus30prcnt,\n  test = fixed(\"polOri.dem-rep\", method = \"z\"),\n  along = \"subj\",\n  breaks = breaks_subj,\n  nsim = n_sims,\n  progress = FALSE\n)\npowC.effectsize_minus40prcnt &lt;- powerCurve(\n  fit = s1.makeLmer_minus40prcnt,\n  test = fixed(\"polOri.dem-rep\", method = \"z\"),\n  along = \"subj\",\n  breaks = breaks_subj,\n  nsim = n_sims,\n  progress = FALSE\n)\npowC.effectsize_minus50prcnt &lt;- powerCurve(\n  fit = s1.makeLmer_minus50prcnt,\n  test = fixed(\"polOri.dem-rep\", method = \"z\"),\n  along = \"subj\",\n  breaks = breaks_subj,\n  nsim = n_sims,\n  progress = FALSE\n)\n\n# combine power curve data sets\npowC.effectsize &lt;- rbind(\n  summary(powC.default) %&gt;% \n    mutate(type = \"default\"),\n  summary(powC.effectsize_minus10prcnt) %&gt;% \n    mutate(type = \"effectsize.minus10%\"),\n  summary(powC.effectsize_minus20prcnt) %&gt;% \n    mutate(type = \"effectsize.minus20%\"),\n  summary(powC.effectsize_minus30prcnt) %&gt;% \n    mutate(type = \"effectsize.minus30%\"),\n  summary(powC.effectsize_minus40prcnt) %&gt;% \n    mutate(type = \"effectsize.minus40%\"),\n  summary(powC.effectsize_minus50prcnt) %&gt;% \n    mutate(type = \"effectsize.minus50%\")\n)\n\n# save simulation results in a data frame\ntime &lt;- format(Sys.time(), \"%Y%m%d_%H%M\")\nfileName &lt;- paste0(\"powC.effectsize\", \"_\", time, \".RData\")\n\nsave(\n  powC.effectsize_minus10prcnt,\n  powC.effectsize_minus20prcnt,\n  powC.effectsize_minus30prcnt,\n  powC.effectsize_minus40prcnt,\n  powC.effectsize_minus50prcnt,\n  powC.effectsize,\n  file = file.path(\"../data/powerAnalyses/simr\", fileName)\n)\n\n\n\n\nShow the code\nFUNPlotPower &lt;- function(myData,\n                         myBreaks = seq(80, 300, 20),\n                         myLegendTitle = waiver(),\n                         myLegendLabels = waiver()) {\n  plot &lt;- myData %&gt;% \n    ggplot(aes(\n      x = nlevels,\n      y = mean,\n      ymin = lower,\n      ymax = upper,\n      color = type,\n      fill = type\n    )) +\n    geom_ribbon(alpha = .1, color = NA) +\n    geom_errorbar(width = 1.5) +\n    geom_line() +\n    geom_point() +\n    geom_hline(yintercept = .95, color = \"grey70\", linetype = \"dashed\") +\n    scale_x_continuous(breaks = myBreaks) +\n    scale_y_continuous(\n      limits = c(0, 1),\n      breaks = seq(0, 1, .05),\n      labels = paste0(seq(0, 100, 5), \"%\")\n    ) +\n    ggthemes::scale_color_colorblind(labels = myLegendLabels) +\n    ggthemes::scale_fill_colorblind(labels = myLegendLabels) +\n    labs(\n      x = \"Number of Participants\",\n      y = \"Power\",\n      color = myLegendTitle,\n      fill = myLegendTitle\n    ) +\n    theme_bw() +\n    theme(\n      legend.position = c(.875, .21),\n      panel.grid.minor = element_blank(),\n      panel.border = element_blank(),\n      axis.line = element_line(color = \"black\")\n    )\n  return(plot)\n}\n\n\n\n\nShow the code\n# load stored simulations (change file name if necessary)\nfileName &lt;- \"powC.effectsize_20240304_1605.RData\"\nload(file.path(\"../data/powerAnalyses/simr\", fileName))\n\n# prepare data for plot: add + 2 on x axis for every type in order to prevent\n# overprinting of errorbars\ndataForPlot &lt;- rbind(\n  filter(powC.effectsize, type == \"default\"),\n  filter(powC.effectsize, type == \"effectsize.minus10%\") %&gt;% \n    mutate(nlevels = nlevels + 1*2),\n  filter(powC.effectsize, type == \"effectsize.minus20%\") %&gt;% \n    mutate(nlevels = nlevels + 2*2),\n  filter(powC.effectsize, type == \"effectsize.minus30%\") %&gt;% \n    mutate(nlevels = nlevels + 3*2),\n  filter(powC.effectsize, type == \"effectsize.minus40%\") %&gt;% \n    mutate(nlevels = nlevels + 4*2),\n  filter(powC.effectsize, type == \"effectsize.minus50%\") %&gt;% \n    mutate(nlevels = nlevels + 5*2)\n)\n\ntmp.legendLabels &lt;- c(\n  paste0(\"default = \", means_fixed$estimate.mean[2]),\n  paste0(\"-\", seq(10, 50, 10), \"% = \", round(means_fixed$estimate.mean[2]*(1-seq(.1, .5, .1)), digits = 4))\n)\n\n# create and display plot\np.powC.effectsizes &lt;- FUNPlotPower(\n  myData= dataForPlot,\n  myLegendTitle = \"Effect Size\",\n  myLegendLabels = tmp.legendLabels\n)\np.powC.effectsizes\n\n\n\n\n\n\n\n\nFigure 7: Power curves for different effect sizes.\n\n\n\n\n\n\n\n3.1.2.2.2 Analytical Approach\nBased on our simulated data, our default model assumes an effect size of 0.0595. That is, we expected that on average democrats would score 0.0595 higher on \\(\\Delta Duration\\) compared to republicans. This value is “empirically” simulated. In principle, the fixed effect that one should expect could also be calculated analytically:\n\\[\neffect_{polOri} = \\Delta Duration_{dem} - \\Delta Duration_{rep}\n\\]\nwith\n\\[\n\\begin{split}\n\\Delta Duration_{dem} = \\frac{(beta\\_0\\_c + beta\\_p\\_c \\cdot X\\_p ) - (beta\\_0\\_b + beta\\_p\\_b \\cdot X\\_p)}\n                             {beta\\_0\\_c + beta\\_p\\_c \\cdot X\\_p + beta\\_0\\_b + beta\\_p\\_b \\cdot X\\_p} \\\\\n                      = \\frac{(3.5 + 0.5 \\cdot 0.2) - (3.5 + 0.5 \\cdot (-0.2))}\n                             {3.5 + 0.5 \\cdot 0.2 + 3.5 + 0.5 \\cdot (-0.2)} \\\\\n                      = \\frac{0.2}{7} =\n                        0.0285714\n\\end{split}\n\\]\nand\n\\[\n\\begin{split}\n\\Delta Duration_{rep} = \\frac{(beta\\_0\\_c + beta\\_p\\_c \\cdot X\\_p ) - (beta\\_0\\_b + beta\\_p\\_b \\cdot X\\_p)}\n                             {beta\\_0\\_c + beta\\_p\\_c \\cdot X\\_p + beta\\_0\\_b + beta\\_p\\_b \\cdot X\\_p} \\\\\n                      = \\frac{(3.5 + (-0.5) \\cdot 0.2) - (3.5 + (-0.5) \\cdot (-0.2))}\n                             {3.5 + 0.2 + 3.5 + (-0.2)} \\\\\n                      = \\frac{-0.2}{7} =\n                        -0.0285714\n\\end{split}\n\\]\nThus the “default” effect size according to the analytical approach is:\n\\[\n\\begin{split}\neffect_{polOri} = \\Delta Duration_{dem} - \\Delta Duration_{rep} \\\\\n  = \\frac{0.2}{7} - \\frac{-0.2}{7} = \\frac{0.4}{7} \\\\\n  = 0.0571429\n\\end{split}\n\\]\nUsing this analytical approach, we can also calculate the expected effect size for the following scenario. Suppose that democrats display a higher dwell time on carbon information than republicans (as before), i.e., \\(beta\\_p_\\_c = 0.2\\). But now suppose that democrats and republicans do not differ in their dwell time on bonus information, i.e. \\(beta\\_p\\_b = 0.0\\). For this situation, we calculate:\n\\[\n\\begin{split}\n\\Delta Duration_{dem} = \\frac{(3.5 + 0.5 \\cdot 0.2) - (3.5 + 0.5 \\cdot (0.0))}\n                             {3.5 + 0.5 \\cdot 0.2 + 3.5 + 0.5 \\cdot (0.0)} \\\\\n                      = \\frac{0.1}{7.1} =\n                        0.0140845\n\\end{split}\n\\]\nand\n\\[\n\\begin{split}\n\\Delta Duration_{rep} = \\frac{(3.5 + (-0.5) \\cdot 0.2) - (3.5 + (-0.5) \\cdot (0.0))}\n                             {3.5 + (-0.5) \\cdot 0.2 + 3.5 + (-0.5) \\cdot (0.0)} \\\\\n                      = \\frac{-0.1}{6.9} =\n                        -0.0144928\n\\end{split}\n\\]\nThus the “smaller” effect size according to the analytical approach is:\n\\[\n\\begin{split}\neffect_{polOri} = \\Delta Duration_{dem} - \\Delta Duration_{rep} \\\\\n  = \\frac{0.1}{7.1} - \\frac{-0.1}{6.9} = 0.0285773\n\\end{split}\n\\]\nThis analytical approach results in the power curve displayed in Figure 8.\n\n\nShow the code\n# define analytical effect sizes\neffSize.analytical_default &lt;-  0.2/7 - -0.2/7\neffSize.analytical_smaller &lt;- 0.1/7.1 - -0.1/6.9\n\n# extend s0.makeLmer to include the max number of subjects\nm.powC.effectsize.analytical &lt;- extend(\n  s0.makeLmer,\n  along = \"subj\",\n  n = 1000\n)\n\n# we will choose a smaller effect size and save this in a new model\n\n# will choose the new effect size to be the analytical default\ns1.makeLmer.analytical_default &lt;- m.powC.effectsize.analytical\nfixef(s1.makeLmer.analytical_default)[\"polOri.dem-rep\"] &lt;- effSize.analytical_default\n\n# will choose the new effect size to be analytical smaller effect size\ns1.makeLmer.analytical_smaller &lt;- m.powC.effectsize.analytical\nfixef(s1.makeLmer.analytical_smaller)[\"polOri.dem-rep\"] &lt;- effSize.analytical_smaller\n\n# test whether simulation will work\ndoTest(s1.makeLmer.analytical_smaller, fixed(\"polOri.dem-rep\", \"z\"))\n\n\n\n\nShow the code\n# how many simulations should be done for each number of subjects?\nn_sims &lt;- 10\n\n# what are the breaks for number of subjects we would like to calculate power for?\nbreaks_subj &lt;- seq(80, 300, 20)\n \n# create power curve data sets\n\npowC.effectsize.analytical_default &lt;- powerCurve(\n  fit = s1.makeLmer.analytical_default,\n  test = fixed(\"polOri.dem-rep\", method = \"z\"),\n  along = \"subj\",\n  breaks = breaks_subj,\n  nsim = n_sims,\n  progress = FALSE\n)\npowC.effectsize.analytical_smaller &lt;- powerCurve(\n  fit = s1.makeLmer.analytical_smaller,\n  test = fixed(\"polOri.dem-rep\", method = \"z\"),\n  along = \"subj\",\n  breaks = breaks_subj,\n  nsim = n_sims,\n  progress = FALSE\n)\n\n# combine power curve data sets\npowC.effectsize.analytical &lt;- rbind(\n  summary(powC.effectsize.analytical_default) %&gt;% \n    mutate(type = \"default\"),\n  summary(powC.effectsize.analytical_smaller) %&gt;% \n    mutate(type = \"smaller\")\n)\n\n# save simulation results in a data frame\ntime &lt;- format(Sys.time(), \"%Y%m%d_%H%M\")\nfileName &lt;- paste0(\"powC.effectsize.analytical\", \"_\", time, \".RData\")\n\nsave(\n  powC.effectsize.analytical_default,\n  powC.effectsize.analytical_smaller,\n  powC.effectsize.analytical,\n  file = file.path(\"../data/powerAnalyses/simr\", fileName)\n)\n\n\n\n\nShow the code\n# load stored simulations (change file name if necessary)\nfileName &lt;- \"powC.effectsize.analytical_20240304_1723.RData\"\nload(file.path(\"../data/powerAnalyses/simr\", fileName))\n\n# prepare data for plot: add + 2 on x axis for every type in order to prevent\n# overprinting of errorbars\ndataForPlot &lt;- rbind(\n  filter(powC.effectsize.analytical, type == \"default\"),\n  filter(powC.effectsize.analytical, type == \"smaller\") %&gt;% \n    mutate(nlevels = nlevels + 1*2)\n)\n\ntmp.legendLabels &lt;- c(\n  paste0(\"default = \", round(effSize.analytical_default, digits = 4)),\n  paste0(\"smaller = \", round(effSize.analytical_smaller, digits = 4))\n)\n\n# create and display plot\np.powC.effectsizes.analytical &lt;- FUNPlotPower(\n  myData= dataForPlot,\n  myLegendTitle = \"Effect Size\",\n  myLegendLabels = tmp.legendLabels\n)\np.powC.effectsizes.analytical\n\n\n\n\n\n\n\n\nFigure 8: Power curves for different effect sizes based on the analytical approach.\n\n\n\n\n\n\n\n\n3.1.2.3 Change Residual Error\nPower is usually heavily affected by the noise (i.e., error / residual variance) we assume to find in our data. Thus, we investigate how different assumptions regarding residual error affect the power to detect a fixed effect of political orientation on \\(\\Delta Duration\\). Figure 9 displays power curves for the assumed default error (0.1939) and errors that are 20%, 40%, 60%, 80%, 100%, 200%, and 300% higher than this default.\n\n\nShow the code\n# what is the estimated effect size in our simulated data?\nsigma(s0.makeLmer)\n\n# extend s0.makeLmer to include the max number of subjects\nm.powC.error &lt;- extend(\n  s0.makeLmer,\n  along = \"subj\",\n  n = 1000\n)\n\n# we will choose greater residual variance and save this in a new model\n\n# will choose the new residual variance to be 20% greater than the default\ns1.makeLmer_plus20prcnt &lt;- m.powC.error\nsigma(s1.makeLmer_plus20prcnt) &lt;- (1+.2)*sigma(s0.makeLmer)\n\n# will choose the new residual variance to be 40% greater than the default\ns1.makeLmer_plus40prcnt &lt;- m.powC.error\nsigma(s1.makeLmer_plus40prcnt) &lt;- (1+.4)*sigma(s0.makeLmer)\n\n# will choose the new residual variance to be 60% greater than the default\ns1.makeLmer_plus60prcnt &lt;- m.powC.error\nsigma(s1.makeLmer_plus60prcnt) &lt;- (1+.6)*sigma(s0.makeLmer)\n\n# will choose the new residual variance to be 80% greater than the default\ns1.makeLmer_plus80prcnt &lt;- m.powC.error\nsigma(s1.makeLmer_plus80prcnt) &lt;- (1+.8)*sigma(s0.makeLmer)\n\n# will choose the new residual variance to be 100% greater than the default\ns1.makeLmer_plus100prcnt &lt;- m.powC.error\nsigma(s1.makeLmer_plus100prcnt) &lt;- (1+1)*sigma(s0.makeLmer)\n\n# will choose the new residual variance to be 200% greater than the default\ns1.makeLmer_plus200prcnt &lt;- m.powC.error\nsigma(s1.makeLmer_plus200prcnt) &lt;- (1+2)*sigma(s0.makeLmer)\n\n# will choose the new residual variance to be 300% greater than the default\ns1.makeLmer_plus300prcnt &lt;- m.powC.error\nsigma(s1.makeLmer_plus300prcnt) &lt;- (1+3)*sigma(s0.makeLmer)\n\n# test whether simulation will work\ndoTest(s1.makeLmer_plus300prcnt, fixed(\"polOri.dem-rep\", \"z\"))\n\n\n\n\nShow the code\n# how many simulations should be done for each number of subjects?\nn_sims &lt;- 10\n\n# what are the breaks for number of subjects we would like to calculate power for?\nbreaks_subj &lt;- seq(80, 300, 20)\n \n# create power curve data sets\n\npowC.error_plus20prcnt &lt;- powerCurve(\n  fit = s1.makeLmer_plus20prcnt,\n  test = fixed(\"polOri.dem-rep\", method = \"z\"),\n  along = \"subj\",\n  breaks = breaks_subj,\n  nsim = n_sims,\n  progress = FALSE\n)\npowC.error_plus40prcnt &lt;- powerCurve(\n  fit = s1.makeLmer_plus40prcnt,\n  test = fixed(\"polOri.dem-rep\", method = \"z\"),\n  along = \"subj\",\n  breaks = breaks_subj,\n  nsim = n_sims,\n  progress = FALSE\n)\npowC.error_plus60prcnt &lt;- powerCurve(\n  fit = s1.makeLmer_plus60prcnt,\n  test = fixed(\"polOri.dem-rep\", method = \"z\"),\n  along = \"subj\",\n  breaks = breaks_subj,\n  nsim = n_sims,\n  progress = FALSE\n)\npowC.error_plus80prcnt &lt;- powerCurve(\n  fit = s1.makeLmer_plus80prcnt,\n  test = fixed(\"polOri.dem-rep\", method = \"z\"),\n  along = \"subj\",\n  breaks = breaks_subj,\n  nsim = n_sims,\n  progress = FALSE\n)\npowC.error_plus100prcnt &lt;- powerCurve(\n  fit = s1.makeLmer_plus100prcnt,\n  test = fixed(\"polOri.dem-rep\", method = \"z\"),\n  along = \"subj\",\n  breaks = breaks_subj,\n  nsim = n_sims,\n  progress = FALSE\n)\npowC.error_plus200prcnt &lt;- powerCurve(\n  fit = s1.makeLmer_plus200prcnt,\n  test = fixed(\"polOri.dem-rep\", method = \"z\"),\n  along = \"subj\",\n  breaks = breaks_subj,\n  nsim = n_sims,\n  progress = FALSE\n)\npowC.error_plus300prcnt &lt;- powerCurve(\n  fit = s1.makeLmer_plus300prcnt,\n  test = fixed(\"polOri.dem-rep\", method = \"z\"),\n  along = \"subj\",\n  breaks = breaks_subj,\n  nsim = n_sims,\n  progress = FALSE\n)\n\n# combine power curve data sets\npowC.error &lt;- rbind(\n  summary(powC.default) %&gt;% \n    mutate(type = \"default\"),\n  summary(powC.error_plus20prcnt) %&gt;% \n    mutate(type = \"error.plus20%\"),\n  summary(powC.error_plus40prcnt) %&gt;% \n    mutate(type = \"error.plus40%\"),\n  summary(powC.error_plus60prcnt) %&gt;% \n    mutate(type = \"error.plus60%\"),\n  summary(powC.error_plus80prcnt) %&gt;% \n    mutate(type = \"error.plus80%\"),\n  summary(powC.error_plus100prcnt) %&gt;% \n    mutate(type = \"error.plus100%\"),\n  summary(powC.error_plus200prcnt) %&gt;% \n    mutate(type = \"error.plus200%\"),\n  summary(powC.error_plus300prcnt) %&gt;% \n    mutate(type = \"error.plus300%\")\n)\n\n# save simulation results in a data frame\ntime &lt;- format(Sys.time(), \"%Y%m%d_%H%M\")\nfileName &lt;- paste0(\"powC.error\", \"_\", time, \".RData\")\n\nsave(\n  powC.error_plus20prcnt,\n  powC.error_plus40prcnt,\n  powC.error_plus60prcnt,\n  powC.error_plus80prcnt,\n  powC.error_plus100prcnt,\n  powC.error_plus200prcnt,\n  powC.error_plus300prcnt,\n  powC.error,\n  file = file.path(\"../data/powerAnalyses/simr\", fileName)\n)\n\n\n\n\nShow the code\n# load stored simulations (change file name if necessary)\nfileName &lt;- \"powC.error_20240305_1052.RData\"\nload(file.path(\"../data/powerAnalyses/simr\", fileName))\n\n# prepare data for plot: add + 2 on x axis for every type in order to prevent\n# overprinting of errorbars\ndataForPlot &lt;- rbind(\n  filter(powC.error, type == \"default\"),\n  filter(powC.error, type == \"error.plus20%\") %&gt;% \n    mutate(nlevels = nlevels + 1*2),\n  filter(powC.error, type == \"error.plus40%\") %&gt;% \n    mutate(nlevels = nlevels + 2*2),\n  filter(powC.error, type == \"error.plus60%\") %&gt;% \n    mutate(nlevels = nlevels + 3*2),\n  filter(powC.error, type == \"error.plus80%\") %&gt;% \n    mutate(nlevels = nlevels + 4*2),\n  filter(powC.error, type == \"error.plus100%\") %&gt;% \n    mutate(nlevels = nlevels + 5*2),\n  filter(powC.error, type == \"error.plus200%\") %&gt;% \n    mutate(nlevels = nlevels + 6*2),\n  filter(powC.error, type == \"error.plus300%\") %&gt;% \n    mutate(nlevels = nlevels + 7*2)\n) %&gt;% \n  mutate(type = factor(type, levels = c(\n    \"default\",\n    \"error.plus20%\",\n    \"error.plus40%\",\n    \"error.plus60%\",\n    \"error.plus80%\",\n    \"error.plus100%\",\n    \"error.plus200%\",\n    \"error.plus300%\"\n  )))\n\ntmp.legendLabels &lt;- c(\n  paste0(\"default = \", means_random$estimate.mean[1]),\n  paste0(\"+\", c(seq(20, 100, 20), 200, 300), \"% = \", round(means_random$estimate.mean[1]*(1+c(seq(.2, 1, .2), 2, 3)), digits = 4))\n)\n\n# create and display plot\np.powC.error &lt;- FUNPlotPower(\n  myData= dataForPlot,\n  myLegendTitle = \"Residual Error (SD)\",\n  myLegendLabels = tmp.legendLabels\n)\np.powC.error + \n  theme(legend.position = c(.875, .28))\n\n\n\n\n\n\n\n\nFigure 9: Power curves for different residual variances.\n\n\n\n\n\n\n\n3.1.2.4 Change Random Slope\nThe power to detect a true effect of political orientation can be affected by how much subjects vary in this effect, that is how big the random slope variance of political orientation is. Figure 10 shows that while greater random slope variance indeed reduces statistical power, one can still achieve good power for reasonable sample sizes even if the expected random slope variance is increased by 500% or 1000%.\n\n\nShow the code\n# what is the estimated random slope in our simulated data?\nVarCorr(s0.makeLmer) %&gt;% \n  as_tibble() %&gt;% \n  filter(var1 == \"polOri.dem-rep\")\n\n# to change the random slope, we have to change the variance-covariance matrix\n# we defined this matrix above. lets do this again for clarity:\n# \n# V_new &lt;- matrix(c(\n#   e1, 0,\n#   0, e4), nrow = 2)\n# VarCorr(s0.makeLmer) &lt;- list(\n#   V_new,\n#   e5\n# )\n# \n# we will need to change e4 (random slope variance)\n# we repeat the definition of e1, e4, and e5 for clarity\ne1 &lt;- VarCorr(s0.makeLmer) %&gt;%\n  as_tibble() %&gt;% \n  filter(grp == \"subj\", var1 == \"(Intercept)\", is.na(var2)) %&gt;% \n  pull(vcov)\ne4 &lt;- VarCorr(s0.makeLmer) %&gt;%\n  as_tibble() %&gt;% \n  filter(grp == \"subj\", var1 == \"polOri.dem-rep\", is.na(var2)) %&gt;% \n  pull(vcov)\ne5 &lt;- VarCorr(s0.makeLmer) %&gt;%\n  as_tibble() %&gt;% \n  filter(grp == \"item\", var1 == \"(Intercept)\", is.na(var2)) %&gt;% \n  pull(vcov)\n\n# extend s0.makeLmer to include the max number of subjects\nm.powC.randomSlope &lt;- extend(\n  s0.makeLmer,\n  along = \"subj\",\n  n = 1000\n)\n\n# we will choose a higher random slope and save this in a new model\n\n# we will choose the new random slope variance to be 200% greater than the default\ns3.makeLmer_plus500prcnt &lt;- m.powC.randomSlope\nVarCorr(s3.makeLmer_plus500prcnt) &lt;- list(\n  matrix(c(e1, 0, 0, (1 + 5)*e4), 2),\n  e5\n)\n\n# we will choose the new random slope variance to be 200% greater than the default\ns3.makeLmer_plus1000prcnt &lt;- m.powC.randomSlope\nVarCorr(s3.makeLmer_plus1000prcnt) &lt;- list(\n  matrix(c(e1, 0, 0, (1 + 10)*e4), 2),\n  e5\n)\n\n# test whether manipulation worked\nVarCorr(s0.makeLmer) %&gt;% \n  as_tibble()\nVarCorr(s3.makeLmer_plus1000prcnt) %&gt;% \n  as_tibble()\n\n# test whether simulation will work\ndoTest(s3.makeLmer_plus1000prcnt, fixed(\"polOri.dem-rep\", \"z\"))\n\n\n\n\nShow the code\n# how many simulations should be done for each number of subjects?\nn_sims &lt;- 1000\n\n# what are the breaks for number of subjects we would like to calculate power for?\nbreaks_subj &lt;- seq(80, 300, 20)\n \n# create power curve data sets\n\npowC.randomSlope_plus500prcnt &lt;- powerCurve(\n  fit = s3.makeLmer_plus500prcnt,\n  test = fixed(\"polOri.dem-rep\", method = \"z\"),\n  along = \"subj\",\n  breaks = breaks_subj,\n  nsim = n_sims,\n  progress = FALSE\n)\npowC.randomSlope_plus1000prcnt &lt;- powerCurve(\n  fit = s3.makeLmer_plus1000prcnt,\n  test = fixed(\"polOri.dem-rep\", method = \"z\"),\n  along = \"subj\",\n  breaks = breaks_subj,\n  nsim = n_sims,\n  progress = FALSE\n)\n\n# combine power curve data sets\npowC.randomSlope &lt;- rbind(\n  summary(powC.default) %&gt;% \n    mutate(type = \"default\"),\n  summary(powC.randomSlope_plus500prcnt) %&gt;% \n    mutate(type = \"randomSlope.plus500%\"),\n  summary(powC.randomSlope_plus1000prcnt) %&gt;% \n    mutate(type = \"randomSlope.plus1000%\")\n)\n\n# save simulation results in a data frame\ntime &lt;- format(Sys.time(), \"%Y%m%d_%H%M\")\nfileName &lt;- paste0(\"powC.randomSlope\", \"_\", time, \".RData\")\n\nsave(\n  powC.randomSlope_plus500prcnt,\n  powC.randomSlope_plus1000prcnt,\n  powC.randomSlope,\n  file = file.path(\"../data/powerAnalyses/simr\", fileName)\n)\n\n\n\n\nShow the code\n# load stored simulations (change file name if necessary)\nfileName &lt;- \"powC.randomSlope_20240305_1157.RData\"\nload(file.path(\"../data/powerAnalyses/simr\", fileName))\n\n# prepare data for plot: add + 2 on x axis for every type in order to prevent\n# overprinting of errorbars\ndataForPlot &lt;- rbind(\n  filter(powC.randomSlope, type == \"default\"),\n  filter(powC.randomSlope, type == \"randomSlope.plus500%\") %&gt;% \n    mutate(nlevels = nlevels + 1*2),\n  filter(powC.randomSlope, type == \"randomSlope.plus1000%\") %&gt;% \n    mutate(nlevels = nlevels + 2*2)\n) %&gt;% \n  mutate(type = factor(type, levels = c(\n    \"default\",\n    \"randomSlope.plus500%\",\n    \"randomSlope.plus1000%\"\n  )))\n\ntmp.legendLabels &lt;- c(\n  paste0(\"default = \", round(means_random$estimate.mean[5]^2, digits = 6)),\n  paste0(\"+\", seq(500, 1000, 500), \"% = \", round(means_random$estimate.mean[5]^2*(1+seq(5, 10, 5)), digits = 6))\n)\n\n# create and display plot\np.powC.randomSlope &lt;- FUNPlotPower(\n  myData= dataForPlot,\n  myLegendTitle = \"Random Slope (Var)\",\n  myLegendLabels = tmp.legendLabels\n)\np.powC.randomSlope\n\n\n\n\n\n\n\n\nFigure 10: Power curves for different random slope variances.\n\n\n\n\n\n\n\n3.1.2.5 Change Number of Items\nTo increase statistical power, we can not only test more subjects but we can also increase the number of items (trials) each subject answers. In Figure 8, we saw that the smaller effect size (assuming that democrats and republicans only differ in dwell time on carbon but not on bonus information) struggled with low power. In Figure 11, we report power curves for this smaller analytical effect size for different numbers of items (25, 36, 49, and 64). Note that the X-axis (Number of Participants) ranges from 100 to 400 (not from 80 to 300 as in all plots before).\n\n\nShow the code\n# extend s0.makeLmer to include the max number of subjects\nm.powC.items &lt;- extend(\n  s0.makeLmer,\n  along = \"subj\",\n  n = 1000\n)\n# extend s0.makeLmer to include 36 items\nm.powC.items_25 &lt;- extend(\n  m.powC.items,\n  along = \"item\",\n  n = 25\n)\n# extend s0.makeLmer to include 36 items\nm.powC.items_36 &lt;- extend(\n  m.powC.items,\n  along = \"item\",\n  n = 36\n)\n# extend s0.makeLmer to include 49 items\nm.powC.items_49 &lt;- extend(\n  m.powC.items,\n  along = \"item\",\n  n = 49\n)\n# extend s0.makeLmer to include 64 items\nm.powC.items_64 &lt;- extend(\n  m.powC.items,\n  along = \"item\",\n  n = 64\n)\n\n# we will choose the smaller analytical effect as effect size with 36 items\ns4.makeLmer.25_smaller &lt;- m.powC.items_25\nfixef(s4.makeLmer.25_smaller)[\"polOri.dem-rep\"] &lt;- effSize.analytical_smaller\n\n# we will choose the smaller analytical effect as effect size with 36 items\ns4.makeLmer.36_smaller &lt;- m.powC.items_36\nfixef(s4.makeLmer.36_smaller)[\"polOri.dem-rep\"] &lt;- effSize.analytical_smaller\n\n# we will choose the smaller analytical effect as effect size with 49 items\ns4.makeLmer.49_smaller &lt;- m.powC.items_49\nfixef(s4.makeLmer.49_smaller)[\"polOri.dem-rep\"] &lt;- effSize.analytical_smaller\n\n# we will choose the smaller analytical effect as effect size with 49 items\ns4.makeLmer.64_smaller &lt;- m.powC.items_64\nfixef(s4.makeLmer.64_smaller)[\"polOri.dem-rep\"] &lt;- effSize.analytical_smaller\n\n# test whether simulation will work\ndoTest(s1.makeLmer.analytical_smaller, fixed(\"polOri.dem-rep\", \"z\"))\ndoTest(s4.makeLmer.64_smaller, fixed(\"polOri.dem-rep\", \"z\"))\n\n\n\n\nShow the code\n# how many simulations should be done for each number of subjects?\nn_sims &lt;- 10\n\n# what are the breaks for number of subjects we would like to calculate power for?\nbreaks_subj &lt;- seq(100, 400, 50)\n \n# create power curve data sets\n\npowC.items_25_smaller &lt;- powerCurve(\n  fit = s4.makeLmer.25_smaller,\n  test = fixed(\"polOri.dem-rep\", method = \"z\"),\n  along = \"subj\",\n  breaks = breaks_subj,\n  nsim = n_sims,\n  progress = FALSE\n)\npowC.items_36_smaller &lt;- powerCurve(\n  fit = s4.makeLmer.36_smaller,\n  test = fixed(\"polOri.dem-rep\", method = \"z\"),\n  along = \"subj\",\n  breaks = breaks_subj,\n  nsim = n_sims,\n  progress = FALSE\n)\npowC.items_49_smaller &lt;- powerCurve(\n  fit = s4.makeLmer.49_smaller,\n  test = fixed(\"polOri.dem-rep\", method = \"z\"),\n  along = \"subj\",\n  breaks = breaks_subj,\n  nsim = n_sims,\n  progress = FALSE\n)\npowC.items_64_smaller &lt;- powerCurve(\n  fit = s4.makeLmer.64_smaller,\n  test = fixed(\"polOri.dem-rep\", method = \"z\"),\n  along = \"subj\",\n  breaks = breaks_subj,\n  nsim = n_sims,\n  progress = FALSE\n)\n\n# combine power curve data sets\npowC.items &lt;- rbind(\n  summary(powC.items_25_smaller) %&gt;% \n    mutate(type = \"items.25\"),\n  summary(powC.items_36_smaller) %&gt;% \n    mutate(type = \"items.36\"),\n  summary(powC.items_49_smaller) %&gt;% \n    mutate(type = \"items.49\"),\n  summary(powC.items_64_smaller) %&gt;% \n    mutate(type = \"items.64\")\n)\n\n# save simulation results in a data frame\ntime &lt;- format(Sys.time(), \"%Y%m%d_%H%M\")\nfileName &lt;- paste0(\"powC.items\", \"_\", time, \".RData\")\n\nsave(\n  powC.items_25_smaller,\n  powC.items_36_smaller,\n  powC.items_49_smaller,\n  powC.items_64_smaller,\n  powC.items,\n  file = file.path(\"../data/powerAnalyses/simr\", fileName)\n)\n\n\n\n\nShow the code\n# load stored simulations (change file name if necessary)\nfileName &lt;- \"powC.items_20240305_1456.RData\"\nload(file.path(\"../data/powerAnalyses/simr\", fileName))\n\n# prepare data for plot: add + 2 on x axis for every type in order to prevent\n# overprinting of errorbars\ndataForPlot &lt;- rbind(\n  filter(powC.items, type == \"items.25\"),\n  filter(powC.items, type == \"items.36\") %&gt;% \n    mutate(nlevels = nlevels + 1*2),\n  filter(powC.items, type == \"items.49\") %&gt;% \n    mutate(nlevels = nlevels + 2*2),\n  filter(powC.items, type == \"items.64\") %&gt;% \n    mutate(nlevels = nlevels + 3*2)\n) %&gt;% \n  mutate(type = factor(type, levels = c(\n    \"items.25\",\n    \"items.36\",\n    \"items.49\",\n    \"items.64\"\n  )))\n\ntmp.legendLabels &lt;- seq(5, 8, 1)^2\n\n# create and display plot\np.powC.items &lt;- FUNPlotPower(\n  myData= dataForPlot,\n  myLegendTitle = \"Number of Items\",\n  myLegendLabels = tmp.legendLabels,\n  myBreaks = seq(100, 400, 50)\n)\np.powC.items\n\n\n\n\n\n\n\n\nFigure 11: Power curves for different numbers of items."
  },
  {
    "objectID": "scripts/EcoTRACEPowerAnalysis_report.html#custom-simulations",
    "href": "scripts/EcoTRACEPowerAnalysis_report.html#custom-simulations",
    "title": "EcoTRACE Power Simulations",
    "section": "3.2 Custom Simulations",
    "text": "3.2 Custom Simulations\nBesides doing power analyses using simr, we could also do power analyses in customized functions we define ourselves. For instance, simr cannot make use of brms::brm to fit data (which we will likely use in the end because of its superior computational power and efficiency). Similarly, it is easier to simulate unbalanced designs in a custom function. Finally, custom power analysis functions would also allow to simulate true correlations between random intercepts and random slopes (which we set to zero up to now). For now, however, the power analyses reported above using simr should do the job."
  },
  {
    "objectID": "scripts/EcoTRACEPowerAnalysis_report.html#footnotes",
    "href": "scripts/EcoTRACEPowerAnalysis_report.html#footnotes",
    "title": "EcoTRACE Power Simulations",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nIn principle, we should calculate separate power analyses for all dependent variables we are planning to analyse in our study (\\(\\Delta Duration\\), \\(\\Delta Frequency\\), \\(First Cell\\), \\(Last Cell\\), and \\(Payne Index\\)). However, this is hardly feasible for two reasons. First, given the sparse literature on our topic, there seems to be little previous research that could inform our parameters, maybe with the exception of \\(\\Delta Duration\\). This is why the power analyses presented in this report focus on this dependent variable. Second, it would be too time consuming to do all power analyses for all the dependent variables.↩︎\nNote that attributes of items are not of primary interest in this study.↩︎\nThe variable they predicted was the number of transitions between options made by each subject on each trial for each of six possible transitions. Although this is a different dependent variable than dwell time, it is nevertheless a process-tracing measure which might allow to draw some conclusions for our goals. The average number of transitions for each trial was 4.0 (SD = 1.2).↩︎\nReeck, Wall, and Johnson (2017) report a by-subject random intercept of 0.29 and an average number of transitions of 4.0, that is the ratio of random intercept SD to fixed intercept is .29/4 = 0.0725.↩︎\nFor instance, it is conceivable that subjects who have a greater than average total dwell time on carbon information also have a greater effect of political orientation on these dwell times. We could capture this by allowing for a small positive correlation between these two random effects of, e.g., 0.10.↩︎\nNote that the fixed effect of polOri should be close to: 0.0571429. For explanations, see Section 3.1.2.2.2.↩︎\nNote, however, that we cannot include all random effects exactly as displayed in Figure 5. Each pair of by-subject random intercept is associated with a specific by-subject random slope based on their correlation. That is, we cannot simply provide all these three parameters separately. To deal with this issue, we will first work with models that assume zero correlation between by-subject random intercepts and slopes.↩︎"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "presentation.html",
    "href": "presentation.html",
    "title": "Presentation",
    "section": "",
    "text": "You can click through the presentation below or open it in a new browser tab here.1"
  },
  {
    "objectID": "presentation.html#footnotes",
    "href": "presentation.html#footnotes",
    "title": "Presentation",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nWhen the presentation is opened in a new tab, you can click the E key,which will toggle the PDF Export Mode. Then you can print the page to a PDF file unsing your browser’s print functionality.↩︎"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome!",
    "section": "",
    "text": "This website accompanies the input talk Data And Power Simulations1, which was part of the retreat of the Department of Social Neuroscience and Social Psychology at the University of Bern in June 2024.\nThe content of the input talk and the website is organized as follows:\nHappy simulations!"
  },
  {
    "objectID": "index.html#footnotes",
    "href": "index.html#footnotes",
    "title": "Welcome!",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThe source code for this website is available on https://github.com/EGuizarRosales/DataAndPowerSimulations. The source code for the shiny app is available on https://github.com/EGuizarRosales/DataAndPowerSimulations_dashboard.↩︎"
  },
  {
    "objectID": "handsOnSimulation.html",
    "href": "handsOnSimulation.html",
    "title": "Hands-On Simulations",
    "section": "",
    "text": "You can try out hands-on simulations by following this link:\nhttps://eguizarrosales.shinyapps.io/dataAndPowerSimulations_dashboard_2/\nYou will see a dashboard with to pages that will look like this:"
  },
  {
    "objectID": "scripts/dataAndPowerSimulations_presentation.html#statistical-power",
    "href": "scripts/dataAndPowerSimulations_presentation.html#statistical-power",
    "title": "Data and Power Simulations",
    "section": "Statistical Power",
    "text": "Statistical Power\n\nDefinition of Statistical Power\n\nStatistical power is the probability that a test will correctly reject a false null hypothesis (i.e., detect an effect when there is one).\nIt is usually denotes as \\(1-\\beta\\), where \\(\\beta\\) is the Type II error rate ( the probability of failing to reject a false null hypothesis).\n\nImportance of Statistical Power\n\nHigh power reduces the risk of Type II errors.\nEnsures that studies are capable of detecting meaningful effects.\nImportant for the credibility and reliability of research findings."
  },
  {
    "objectID": "scripts/dataAndPowerSimulations_presentation.html#factors-affecting-statistical-power-12",
    "href": "scripts/dataAndPowerSimulations_presentation.html#factors-affecting-statistical-power-12",
    "title": "Data and Power Simulations",
    "section": "Factors Affecting Statistical Power (1/2)",
    "text": "Factors Affecting Statistical Power (1/2)\n\nSample Size\n\nLarger sample sizes increase power.\nPractical considerations: resources, time, and feasibility.\n\nEffect Size\n\nLarger effect sizes are easier to detect, leading to higher power.\nDifferent effect sizes exist for different types of analyses. Many of them can be converted between each other. (Effect size converter)"
  },
  {
    "objectID": "scripts/dataAndPowerSimulations_presentation.html#factors-affecting-statistical-power-22",
    "href": "scripts/dataAndPowerSimulations_presentation.html#factors-affecting-statistical-power-22",
    "title": "Data and Power Simulations",
    "section": "Factors Affecting Statistical Power (2/2)",
    "text": "Factors Affecting Statistical Power (2/2)\n\nSignificance Level (\\(\\alpha\\))\n\nCommonly set at 0.05, but lower alpha values (e.g., 0.01) reduce power.\nTrade-off between Type I error (false positive) and Type II error (false negative).\n\nVariance\n\nLower variance within data increases power.\nMethods to reduce variance include controlling for confounding variables and improving measurement precision."
  },
  {
    "objectID": "scripts/dataAndPowerSimulations_presentation.html#power-analysis-12",
    "href": "scripts/dataAndPowerSimulations_presentation.html#power-analysis-12",
    "title": "Data and Power Simulations",
    "section": "Power Analysis (1/2)",
    "text": "Power Analysis (1/2)\n\nPurpose of Power Analysis\n\nDetermine the sample size needed to achieve a desired power level for detecting a given effect size.\nCan be conducted before (a priori) or after (post hoc) a study.\n\nSteps in Conducting Power Analysis\n\nDefine the significance level (α).\nEstimate the effect size (based on literature or pilot studies).\nChoose the desired power level (traditionally 80%, more recently: 90% or 95%).\nWhenever possible, use power analysis tools/software (e.g., G*Power, R) to calculate the required sample size (much easier)."
  },
  {
    "objectID": "scripts/dataAndPowerSimulations_presentation.html#power-analyses-22",
    "href": "scripts/dataAndPowerSimulations_presentation.html#power-analyses-22",
    "title": "Data and Power Simulations",
    "section": "Power Analyses (2/2)",
    "text": "Power Analyses (2/2)\n\nTypes of Power Analysis\n\nA priori: Conducted before data collection to ensure adequate sample size.\nPost hoc: Conducted after the study to determine the achieved power, often used for interpreting non-significant results.\nSensitivity analysis: Determines the smallest effect size that can be detected with a given sample size and power."
  },
  {
    "objectID": "scripts/dataAndPowerSimulations_presentation.html#power-analyses-and-simulations",
    "href": "scripts/dataAndPowerSimulations_presentation.html#power-analyses-and-simulations",
    "title": "Data and Power Simulations",
    "section": "Power Analyses and Simulations",
    "text": "Power Analyses and Simulations\n\nNot every power analysis requires simulations\nFor simple cases like t-tests, ANOVAs, correlations, multiple regressions, etc. there are analytical solutions for calculating power analyses (e.g., G*Power)\nFor more complex study designs, analytical solutions are difficult or impossible (e.g., situations with multiple interacting factors, non-standard distributions or assumptions, missing data…)\nFocus on multi-level models: analytical solutions for power analyses are too complex (or have not even been derived yet).\n→ Simulations"
  },
  {
    "objectID": "scripts/dataAndPowerSimulations_presentation.html#multi-level-models-14",
    "href": "scripts/dataAndPowerSimulations_presentation.html#multi-level-models-14",
    "title": "Data and Power Simulations",
    "section": "Multi-Level Models (1/4)",
    "text": "Multi-Level Models (1/4)\n\nAlternative Terms\n\nMulti-level models = hierarchical linear models (HLM) = mixed-effects models\nMulti-level models ≠ hierarchical regression\n\nMulti-level models have superior power (over, e.g., t-test with data aggregated over trials) when analyzing data that has a nested or hierarchical structure.\nThese models account for the fact that data points within groups are often more similar to each other than to data points in other groups."
  },
  {
    "objectID": "scripts/dataAndPowerSimulations_presentation.html#multi-level-models-24",
    "href": "scripts/dataAndPowerSimulations_presentation.html#multi-level-models-24",
    "title": "Data and Power Simulations",
    "section": "Multi-Level Models (2/4)",
    "text": "Multi-Level Models (2/4)\n\nBenefits\n\nCorrect Standard Errors: Multi-level models account for the non-independence of observations within clusters, providing more accurate standard errors and significance tests.\nPartitioning Variance: They allow for the partitioning of variance at different levels (e.g., variance between individuals, within individuals, between trials, …), helping to identify where variability in the outcome lies.\nModeling Complex Relationships: These models can include fixed effects (constant, average effect of an explanatory variable on the outcome) and random effects (account for variability across different levels in the data)."
  },
  {
    "objectID": "scripts/dataAndPowerSimulations_presentation.html#multi-level-models-34",
    "href": "scripts/dataAndPowerSimulations_presentation.html#multi-level-models-34",
    "title": "Data and Power Simulations",
    "section": "Multi-Level Models (3/4)",
    "text": "Multi-Level Models (3/4)\n\nTypical examples in psychology:\n\nNested data structures: Students nested within schools (educational psychology, clinical psychology, cultural differences research, etc.)\nRepeated measures: Participants complete multiple trials which differ in some attributes.\nE.g., participants complete 25 trials which differ in the combination of bonus and carbon outcomes."
  },
  {
    "objectID": "scripts/dataAndPowerSimulations_presentation.html#multi-level-models-44",
    "href": "scripts/dataAndPowerSimulations_presentation.html#multi-level-models-44",
    "title": "Data and Power Simulations",
    "section": "Multi-Level Models (4/4)",
    "text": "Multi-Level Models (4/4)"
  },
  {
    "objectID": "scripts/dataAndPowerSimulations_presentation.html#power-simulations-procedure",
    "href": "scripts/dataAndPowerSimulations_presentation.html#power-simulations-procedure",
    "title": "Data and Power Simulations",
    "section": "Power Simulations: Procedure",
    "text": "Power Simulations: Procedure\n\nThink about the Data Generating Process (also very useful on a conceptual level!)\nDefine the parameters:\n\nsample sizes (subjects, trials),\nsizes for fixed and random effects (including residual (error) variance)\nsignificance level\n\nGenerate a data set using the Data Generating Process\nAnalyse the data set (fit your model to the data) and store the p value of your effect(s) of interest.\nRepeat steps 3 and 4 for a sufficient number of times (e.g., 1000 iterations).\nCount the number of analyses with significant results (true positives) and divide it by the total number of analyses (i.e., iterations) = Power"
  },
  {
    "objectID": "scripts/dataAndPowerSimulations_presentation.html#example-ecotrace-project",
    "href": "scripts/dataAndPowerSimulations_presentation.html#example-ecotrace-project",
    "title": "Data and Power Simulations",
    "section": "Example: EcoTRACE Project",
    "text": "Example: EcoTRACE Project\n\nPrimary Question:\nDoes political orientation affect how individual search for, process, and integrate information during climate-relevant decision-making? (process-tracing measures as dependent variables)\nSecondary Questions:\nDo the occurrence of extreme weather events and participants’ attribution of such events to climate change moderate the effect of political orientation on process-tracing measures?\nMethods\n\nOnline process-tracing using mouselabWEB (Try EcoTRACE)\nRepresentative US sample (total N = 1’100)\nStorm events database: detailed record of extreme weather events on US county level"
  },
  {
    "objectID": "scripts/dataAndPowerSimulations_presentation.html#challenge",
    "href": "scripts/dataAndPowerSimulations_presentation.html#challenge",
    "title": "Data and Power Simulations",
    "section": "Challenge",
    "text": "Challenge\n\nConduct an a priori power analysis for planning and preregistering the study without pilot data (→ Simulations)\nMain Question:\nHow many participants and trials do we need to reach 95% power to detect the smallest effect size of interest (SESOI)?\nFollow up question:\nHow do different parameters affect the power to detect the SESOI?\n\nNumber of participants\nNumber of trials\nSESOI\nRandom effects (intercepts and slopes)\nNoise in the data"
  },
  {
    "objectID": "scripts/dataAndPowerSimulations_presentation.html#data-generating-process-13",
    "href": "scripts/dataAndPowerSimulations_presentation.html#data-generating-process-13",
    "title": "Data and Power Simulations",
    "section": "Data Generating Process (1/3)",
    "text": "Data Generating Process (1/3)\n\nPrimary question: Does participants’ political orientation affect how much time they spend gathering information regarding carbon relative to bonus outcomes of their choice?\n\n\\[\n\\Delta Duration = \\frac{(t_{A\\_Carbon} + t_{B\\_Carbon}) - (t_{A\\_Bonus} + t_{B\\_Bonus})}{t_{A\\_Carbon} + t_{B\\_Carbon} + t_{A\\_Bonus} + t_{B\\_Bonus}}\n\\]\nSimpler question: Does participants’ political orientation affect how much time they spend on gathering information regarding carbon outcomes of their choice?\n(\\(t_{A\\_Carbon} + t_{B\\_Carbon}\\))"
  },
  {
    "objectID": "scripts/dataAndPowerSimulations_presentation.html#data-generating-process-23",
    "href": "scripts/dataAndPowerSimulations_presentation.html#data-generating-process-23",
    "title": "Data and Power Simulations",
    "section": "Data Generating Process (2/3)",
    "text": "Data Generating Process (2/3)\nAssumptions\n\nThe mean time spent on gathering carbon information, irrespective of participants’ political orientation, is 3.5 seconds. → fixed intercept = 3.5\nOn average, Democrats spend 0.2 seconds longer on gathering carbon information than Republicans. That is, the mean effect of political orientation on dwell time on carbon information is 0.2 seconds. → fixed effect of polOri = 0.2\nSubjects differ from the two group means (Republican or Democrat). This difference is normally distributed with a mean of 0 and a standard deviation of 0.5 seconds. → by-subject random intercept SD = 0.5\nWithin subjects, trials differ from each subjects mean dwell time. This difference is normally distributed with a mean of 0 and a standard deviation of 0.5 seconds. → by-item random intercept SD = 0.5\nThe noise (error) in the data is normally distributed with a mean of 0 and a standard deviation of 0.1 → random error SD = 0.1"
  },
  {
    "objectID": "scripts/dataAndPowerSimulations_presentation.html#excursus-faux",
    "href": "scripts/dataAndPowerSimulations_presentation.html#excursus-faux",
    "title": "Data and Power Simulations",
    "section": "Excursus: Faux",
    "text": "Excursus: Faux\n\nVery helpful package for everything related to data simulation: faux\n\nadd_random()add_between()add_ranef()calculate DV\n\n\n\n# \n1add_random(subj = 4, trial = 2)\n\n\n1\n\nGenerate data fully crossing 4 subjects with 2 trials each.\n\n\n\n\n# A tibble: 8 × 2\n  subj  trial \n  &lt;chr&gt; &lt;chr&gt; \n1 subj1 trial1\n2 subj1 trial2\n3 subj2 trial1\n4 subj2 trial2\n5 subj3 trial1\n6 subj3 trial2\n7 subj4 trial1\n8 subj4 trial2\n\n\n\n\n\nadd_random(subj = 4, trial = 2) %&gt;% \n1  add_between(\"subj\", polOri = c(\"rep\", \"dem\"), .prob = 4*c(.5, .5), .shuffle = FALSE) %&gt;%\n2  add_contrast(\"polOri\", contrast = \"anova\")\n\n\n1\n\nAdd a between subjects factor political orientation with levels “rep” and “dem”. Both levels should be assigned with equal probability. The levels should not be shuffled.\n\n2\n\nANOVA-contrast-code the factor polOri (so that the intercept will indicate the grand mean).\n\n\n\n\n# A tibble: 8 × 4\n  subj  trial  polOri `polOri.dem-rep`\n  &lt;chr&gt; &lt;chr&gt;  &lt;fct&gt;             &lt;dbl&gt;\n1 subj1 trial1 rep                -0.5\n2 subj1 trial2 rep                -0.5\n3 subj2 trial1 rep                -0.5\n4 subj2 trial2 rep                -0.5\n5 subj3 trial1 dem                 0.5\n6 subj3 trial2 dem                 0.5\n7 subj4 trial1 dem                 0.5\n8 subj4 trial2 dem                 0.5\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nadd_random(subj = 4, trial = 2) %&gt;% \n  add_between(\"subj\", polOri = c(\"rep\", \"dem\"), .prob = 4*c(.5, .5), .shuffle = FALSE) %&gt;% \n  add_contrast(\"polOri\", contrast = \"anova\") %&gt;% \n1  add_ranef(\"subj\", bySubjectRandomIntercept = 2) %&gt;%\n2  add_ranef(\"trial\", byTrialRandomIntercept = 1) %&gt;%\n3  add_ranef(error = 0.5) %&gt;%\n  select(subj, trial, starts_with(\"by\"), error)\n\n\n1\n\nAdd the by-subject random intercept with a SD = 2 (normally distributed).\n\n2\n\nAdd the by-trial random intercept with a SD = 1 (normally distributed).\n\n3\n\nAdd a random residual (error) with SD = 0.5 (normally distributed).\n\n\n\n\n# A tibble: 8 × 5\n  subj  trial  bySubjectRandomIntercept byTrialRandomIntercept   error\n  &lt;chr&gt; &lt;chr&gt;                     &lt;dbl&gt;                  &lt;dbl&gt;   &lt;dbl&gt;\n1 subj1 trial1                    0.379                   2.06 -0.211 \n2 subj1 trial2                    0.379                   1.07 -0.184 \n3 subj2 trial1                    1.43                    2.06  0.424 \n4 subj2 trial2                    1.43                    1.07 -0.0384\n5 subj3 trial1                    0.655                   2.06  0.257 \n6 subj3 trial2                    0.655                   1.07  0.340 \n7 subj4 trial1                    2.46                    2.06 -0.988 \n8 subj4 trial2                    2.46                    1.07  0.290 \n\n\n\n\nFormula: dv ~ polOri + (1|subj) + (1|trial)\n\nfixedEff_intercept &lt;- 8\nfixedEff_polOri &lt;- 0.5\n\nadd_random(subj = 4, trial = 2) %&gt;% \n  add_between(\"subj\", polOri = c(\"rep\", \"dem\"), .prob = 4*c(.5, .5), .shuffle = FALSE) %&gt;% \n  add_contrast(\"polOri\", contrast = \"anova\") %&gt;% \n  add_ranef(\"subj\", bySubjectRandomIntercept = 2) %&gt;%\n  add_ranef(\"trial\", byTrialRandomIntercept = 1) %&gt;%\n  add_ranef(error = 0.5) %&gt;% \n  mutate(\n    dv = \n1      fixedEff_intercept + bySubjectRandomIntercept + byTrialRandomIntercept +\n2      fixedEff_polOri * `polOri.dem-rep` +\n3      error\n  )\n\n\n1\n\nAdd fixed and random intercepts.\n\n2\n\nAdd fixed effect of polOri.\n\n3\n\nAdd random error term."
  },
  {
    "objectID": "scripts/dataAndPowerSimulations_presentation.html#data-generating-process-33",
    "href": "scripts/dataAndPowerSimulations_presentation.html#data-generating-process-33",
    "title": "Data and Power Simulations",
    "section": "Data Generating Process (3/3)",
    "text": "Data Generating Process (3/3)\n\n# define data simulation function\nFUN_sim_dtCarbon &lt;- function(\n  n_subj       =         50, # number of subjects\n  n_subj_prop  =  c(.5, .5), # proportion of republican and democrat subjects\n  n_trial      =         25, # number of trials\n  beta_0       =        3.5, # intercept (grand mean) for dwell time (dt) carbon\n  beta_p       =        .20, # effect of political orientation on dt carbon\n  subj_0       =        .50, # by-subject random intercept sd for dt carbon\n  trial_0      =        .50, # by-trial random intercept sd\n  sigma        =        .10, # residual (error) sd\n  \n  truncNegNums =       TRUE # should negative number be truncuated at zero?\n) {\n  \n  # simulate data for dwell time on carbon information\n  dataSim &lt;- \n    # add random factor subject\n    add_random(subj = n_subj) %&gt;%\n    # add random factor trial\n    add_random(trial = n_trial) %&gt;%\n    # add between-subject factor political orientation (with anova contrast)\n    add_between(\"subj\", polOri = c(\"rep\", \"dem\"), .prob = n_subj_prop*n_subj, .shuffle = FALSE) %&gt;% \n    add_contrast(\"polOri\", colnames = \"X_p\", contrast = \"anova\") %&gt;% \n    # add by-subject random intercept\n    add_ranef(\"subj\", S_0 = subj_0) %&gt;% \n    # add by-trial random intercept\n    add_ranef(\"trial\", T_0 = trial_0) %&gt;% \n    # add error term\n    add_ranef(e_st = sigma) %&gt;% \n    # add response values\n    mutate(\n      # add together fixed and random effects for each effect\n      B_0 = beta_0 + S_0 + T_0,\n      B_p = beta_p,\n      # calculate dv by adding each effect term multiplied by the relevant\n      # effect-coded factors and adding the error term\n      dwellTime = B_0 + (B_p * X_p) + e_st\n    )\n  \n  # truncuate negative dwell times\n  if(truncNegNums) {\n    dataSim &lt;- dataSim %&gt;% \n      mutate(dwellTime = if_else(dwellTime &lt; 0, 0, dwellTime))\n  }\n  \n  # run a linear mixed effects model\n  mod &lt;- lmer(\n    dwellTime ~ polOri + (1 | subj) + (1 | trial),\n    data = dataSim\n  )\n  \n  # get results in tidy format\n  mod.broom &lt;- broom.mixed::tidy(mod)\n  \n  return(list(\n    dataSim = dataSim,\n    modelLmer = mod,\n    modelResults = mod.broom\n  ))\n  \n}"
  },
  {
    "objectID": "scripts/dataAndPowerSimulations_presentation.html#data-simulation-12",
    "href": "scripts/dataAndPowerSimulations_presentation.html#data-simulation-12",
    "title": "Data and Power Simulations",
    "section": "Data Simulation (1/2)",
    "text": "Data Simulation (1/2)\n\ndataSimmodelResults"
  },
  {
    "objectID": "scripts/dataAndPowerSimulations_presentation.html#data-simulation-22",
    "href": "scripts/dataAndPowerSimulations_presentation.html#data-simulation-22",
    "title": "Data and Power Simulations",
    "section": "Data Simulation (2/2)",
    "text": "Data Simulation (2/2)\nRemember: We repeat the simulation of a data set a sufficient number of times (10 iterations in this example).\n\n\nCodeResultsPower\n\n\n\nFUN_powerSim &lt;- function(rep) {\n  sim &lt;- FUN_sim_dtCarbon()$modelResults\n  sim %&gt;% \n    filter(term == \"polOri.dem-rep\") %&gt;% \n    mutate(simulation = rep)\n}\n\nn_simulations &lt;- 10\n1allSimulations &lt;- map_df(1:n_simulations, FUN_powerSim)\n\n\n1\n\nApply the same function n_simulations times.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRemember: Power = number of significant results divided by number of all simulations.\nWe can calculate power as follows:\n\nres &lt;- allSimulations %&gt;% \n  select(simulation, p.value) %&gt;% \n  mutate(significant = if_else(p.value &lt; 0.05, 1, 0))\nres\n\n# A tibble: 10 × 3\n   simulation p.value significant\n        &lt;int&gt;   &lt;dbl&gt;       &lt;dbl&gt;\n 1          1  0.0632           0\n 2          2  0.958            0\n 3          3  0.648            0\n 4          4  0.783            0\n 5          5  0.998            0\n 6          6  0.110            0\n 7          7  0.766            0\n 8          8  0.0730           0\n 9          9  0.0130           1\n10         10  0.262            0\n\n\n\nsum(res$significant)/length(res$significant)\n\n[1] 0.1\n\n\nEquivalent but more elegant:\n\nmean(allSimulations$p.value &lt; 0.05)\n\n[1] 0.1"
  },
  {
    "objectID": "scripts/dataAndPowerSimulations_presentation.html#interactive-dashboard",
    "href": "scripts/dataAndPowerSimulations_presentation.html#interactive-dashboard",
    "title": "Data and Power Simulations",
    "section": "Interactive Dashboard",
    "text": "Interactive Dashboard\nVisit the following shiny application to conduct hands-on data & power simulations:\nhttps://eguizarrosales.shinyapps.io/dataAndPowerSimulations_dashboard_2/"
  },
  {
    "objectID": "scripts/dataAndPowerSimulations_presentation.html#data-simulation-explanation-13",
    "href": "scripts/dataAndPowerSimulations_presentation.html#data-simulation-explanation-13",
    "title": "Data and Power Simulations",
    "section": "Data Simulation: Explanation (1/3)",
    "text": "Data Simulation: Explanation (1/3)\nIn the first panel, each point represents a subject’s the mean dwell time and the lines indicate ± 1 SD. Subjects are arranged in ascending order for mean dwell time, separately for Republicans and Democrats."
  },
  {
    "objectID": "scripts/dataAndPowerSimulations_presentation.html#data-simulation-explanation-23",
    "href": "scripts/dataAndPowerSimulations_presentation.html#data-simulation-explanation-23",
    "title": "Data and Power Simulations",
    "section": "Data Simulation: Explanation (2/3)",
    "text": "Data Simulation: Explanation (2/3)\nIn the second panel, the data for Republicans and Democrats are displayed on a group level using rain cloud plots."
  },
  {
    "objectID": "scripts/dataAndPowerSimulations_presentation.html#data-simulation-explanation-33",
    "href": "scripts/dataAndPowerSimulations_presentation.html#data-simulation-explanation-33",
    "title": "Data and Power Simulations",
    "section": "Data Simulation: Explanation (3/3)",
    "text": "Data Simulation: Explanation (3/3)\nIn the results panel, the left table displays results of a mixed-model that was fitted with lmer(dwellTime ~ polOri + (1|subj) + (1|trial), data). The right table displays results of a simple linear regression lm(dwellTime ~ polOri, data_aggregated). Note that data_aggregated contains for each subject one dwell time aggregated over all trials. Also note that this analysis is equivalent to a simple t-test (with equal variances)."
  },
  {
    "objectID": "scripts/dataAndPowerSimulations_presentation.html#power-simulation-explanation-12",
    "href": "scripts/dataAndPowerSimulations_presentation.html#power-simulation-explanation-12",
    "title": "Data and Power Simulations",
    "section": "Power Simulation: Explanation (1/2)",
    "text": "Power Simulation: Explanation (1/2)\nThe first panel shows the distribution of all fixed and random effects as estimated in the N simulations. The effect of Political Orientation is displayed in blue."
  },
  {
    "objectID": "scripts/dataAndPowerSimulations_presentation.html#power-simulation-explanation-22",
    "href": "scripts/dataAndPowerSimulations_presentation.html#power-simulation-explanation-22",
    "title": "Data and Power Simulations",
    "section": "Power Simulation: Explanation (2/2)",
    "text": "Power Simulation: Explanation (2/2)\nThe second panel shows a density plot for the p-values of the effect of Political Orientation. Note the negative logarithmic scale on the x-axis: higher values indicate lower p-values, i.e., more significant results. The area under the density curve for p-values greater than α are displayed in red, p-values smaller than α in green."
  }
]